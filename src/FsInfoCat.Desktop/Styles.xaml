<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Height" Value="{DynamicResource DefaultTextBoxHeight}"/>
        <Setter Property="AcceptsReturn" Value="False"/>
        <Setter Property="AcceptsTab" Value="False"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>

    </Style>
    <Style TargetType="TextBox" x:Key="MultiLineTextBox">
        <Setter Property="Height" Value="{DynamicResource DefaultMultiLineTextBoxHeight}"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="AcceptsTab" Value="True"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style TargetType="TextBox" x:Key="TwoDigitNumericTextBox">
        <Setter Property="MinWidth" Value="{DynamicResource DefaultTextBoxHeight}"/>
    </Style>
    <Style x:Key="MultiLineTextBox" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBoxBorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="AcceptsTab" Value="True"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="InfoMessageTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource InfoDarkBrush}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style x:Key="SuccessMessageTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource SuccessDarkBrush}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style x:Key="WarningMessageTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource WarningDarkBrush}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style x:Key="ErrorMessageTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource ErrorDarkBrush}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>
    <Style TargetType="PasswordBox">
        <Setter Property="Height" Value="{DynamicResource DefaultTextBoxHeight}"/>
    </Style>
    <ControlTemplate x:Key="DefaultGridSplitterControlTemplate" TargetType="{x:Type GridSplitter}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
    </ControlTemplate>
    <ControlTemplate x:Key="DefaultGridSplitterPreviewControlTemplate" TargetType="{x:Type Control}">
        <Rectangle Fill="{DynamicResource TranslucentBlack50pctBrush}"/>
    </ControlTemplate>
    <Style x:Key="DefaultGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="PreviewStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template" Value="{DynamicResource DefaultGridSplitterPreviewControlTemplate}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{DynamicResource DefaultGridSplitterControlTemplate}"/>
    </Style>
    <Style x:Key="VerticalGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource VerticalSeparatorBrush}"/>
        <Setter Property="ResizeDirection" Value="Columns"/>
        <Setter Property="Width" Value="{DynamicResource DefaultSpacingValue}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Cursor" Value="SizeWE"/>
    </Style>
    <Style x:Key="HorizontalGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource HorizontalSeparatorBrush}"/>
        <Setter Property="ResizeDirection" Value="Rows"/>
        <Setter Property="Height" Value="{DynamicResource DefaultSpacingValue}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Cursor" Value="SizeNS"/>
    </Style>
    <!--<Style TargetType="GroupBox" BasedOn="{StaticResource DefaultGroupBoxStyle}"/>-->
    <Style x:Key="DefaultGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource LightBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    <Style x:Key="PopupOuterBorder" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ThickBorderThickness}"/>
        <Setter Property="CornerRadius" Value="{DynamicResource PopupOuterBortderCornerRadius}"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="{DynamicResource ExtraWideSpacing}"/>
    </Style>
    <Style x:Key="PopupTitleBorder" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="{DynamicResource PopupTitleCornerRadius}"/>
        <Setter Property="Padding" Value="{DynamicResource DefaultSpacing}"/>
    </Style>
    <Style x:Key="PopupContentBorder" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="{DynamicResource PopupContentCornerRadius}"/>
        <Setter Property="Background" Value="White"/>
    </Style>
    <Style x:Key="DefaultButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource ThinBorderThickness}"/>
        <Setter Property="Width" Value="{DynamicResource DefaultButtonWidth}"/>
        <Setter Property="Height" Value="{DynamicResource DefaultButtonHeight}"/>
    </Style>
    <Style x:Key="SquareButton" TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButton}">
        <Setter Property="Width" Value="{DynamicResource DefaultButtonHeight}"/>
    </Style>
</ResourceDictionary>
