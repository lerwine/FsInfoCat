<#+
/* Following assemblies are required:
 *     EnvDTE
 *     EnvDTE80
 *     System.Core
 *     System.Linq
 *     System.Xml
 *     System.Xml.Linq
 *     System.Xml.ReaderWriter
 * The following namespaces are required:
 *     EnvDTE
 *     EnvDTE80
 *     Microsoft.VisualStudio.TextTemplating
 *     System
 *     System.Collections.Generic
 *     System.Collections.ObjectModel
 *     System.IO
 *     System.Linq
 *     System.Reflection
 *     System.Text
 *     System.Text.RegularExpressions
 *     System.Xml
 *     System.Xml.Linq
 *     System.Xml.Schema
 */

#region core.ttinclude

private XDocument _entityDefinitionsDocument;

List<ValidationEventArgs> ValidationErrors { get; } = new();

XDocument EntityDefinitionsDocument
{
    get
    {
        if (_entityDefinitionsDocument is null)
        {
            XmlReaderSettings readerSettings = new() { ValidationType = ValidationType.Schema };
            readerSettings.Schemas.Add("", Path.Combine(Path.GetDirectoryName(Solution.FullName), "FsInfoCat\\Resources\\EntityDefinitions.xsd"));
            readerSettings.ValidationEventHandler += XmlValidationEventHandler;
            using XmlReader reader = XmlReader.Create(Path.Combine(Path.GetDirectoryName(Solution.FullName), "FsInfoCat\\Resources\\EntityDefinitions.xml"), readerSettings);
            _entityDefinitionsDocument = XDocument.Load(reader, LoadOptions.PreserveWhitespace);
        }
        return _entityDefinitionsDocument;
    }
}

void XmlValidationEventHandler(object sender, ValidationEventArgs e) { ValidationErrors.Add(e); }

#endregion

private static string _templateFolder = null;
private static EnvDTE.DTE _dte = null;
private static EnvDTE.Solution _solution = null;
private static EnvDTE.ProjectItem _templateItem = null;
private static EnvDTE.Project _currentProject = null;
private static ProjectInfoObject _projectInfo = null;
private static string _defaultNamespace = null;

string TemplateFolder
{
	get
	{
		if (_templateFolder == null)
			_templateFolder = Path.GetDirectoryName(Host.TemplateFile);
		return _templateFolder;
	}
}

string DefaultNamespace
{
	get
	{
		if (_defaultNamespace != null)
			return _defaultNamespace;
		_defaultNamespace = GetCurrentItemPropertyString("CustomToolNamespace");
		if (!String.IsNullOrEmpty(_defaultNamespace))
			return _defaultNamespace;
		try
		{
			_defaultNamespace = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("NamespaceHint")?.ToString();
			if (!String.IsNullOrEmpty(_defaultNamespace))
				return _defaultNamespace;
		}
		catch { }
		_defaultNamespace = GetCurrentItemPropertyString("RootNamespace");
		if (String.IsNullOrEmpty(_defaultNamespace))
			_defaultNamespace = (String.IsNullOrEmpty(ProjectInfo.DefaultNamespace)) ? ProjectInfo.RootNamespace ?? "" : ProjectInfo.DefaultNamespace;
		return _defaultNamespace;
	}
}

EnvDTE.DTE DTE
{
	get
	{
		if (_dte == null)
			_dte = (EnvDTE.DTE)((Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)));
		return _dte;
	}
}

EnvDTE.Solution Solution
{
	get
	{
		if (_solution == null)
			_solution = DTE.Solution;
		return _solution;
	}
}

EnvDTE.ProjectItem TemplateItem
{
	get
	{
		if (_templateItem == null)
			_templateItem = Solution.FindProjectItem(Host.TemplateFile);
		return _templateItem;
	}
}

EnvDTE.Project CurrentProject
{
	get
	{
		if (_currentProject == null)
			_currentProject = TemplateItem.ContainingProject;
		return _currentProject;
	}
}

ProjectInfoObject ProjectInfo
{
	get
	{
		if (_projectInfo == null)
			_projectInfo = new ProjectInfoObject(CurrentProject);
		return _projectInfo;
	}
}

string CustomToolOutput { get { return GetCurrentItemPropertyString("CustomToolOutput"); } }

string ActiveConfig { get { return GetPropertyString(Solution.Properties, "ActiveConfig"); } }

IEnumerable<FileInfo> GetProjectItemFiles(EnvDTE.ProjectItem pi)
{
	for (int i = 0; i < pi.FileCount; i++)
		yield return new System.IO.FileInfo(pi.FileNames[(short)(i + 1)]);
}

IEnumerable<FileInfo> GetProjectFiles(Func<EnvDTE.ProjectItem, System.IO.FileInfo, bool> predicate = null)
{
	IEnumerable<EnvDTE.ProjectItem> items = CurrentProject.ProjectItems.OfType<EnvDTE.ProjectItem>().Where(pi => ProjectInfo.FileKind.Equals(new Guid(pi.Kind)));

	if (predicate == null)
		return items.SelectMany(pi => GetProjectItemFiles(pi));

	return items.SelectMany(pi => GetProjectItemFiles(pi).Where(fi => predicate(pi, fi)));
}

IEnumerable<FileInfo> GetCodeProjectFiles() { return GetProjectFiles((EnvDTE.ProjectItem pi, System.IO.FileInfo fi) => pi.FileCodeModel != null); }

IEnumerable<FileInfo> GetNonCodeProjectFiles() { return GetProjectFiles((EnvDTE.ProjectItem pi, System.IO.FileInfo fi) => pi.FileCodeModel == null); }
/*
XText ToWhiteSpaceNormalized(XText source)
{
    string text = source.Value;
    if (NormalizeNewLineRegex.IsMatch(text))
        text = NormalizeNewLineRegex.Replace(text, Environment.NewLine);
    if (TrimOuterBlankLinesRegex.IsMatch(text))
        text = TrimOuterBlankLinesRegex.Replace(text, Environment.NewLine);
    if (NormalizeWsRegex.IsMatch(text))
        text = NormalizeWsRegex.Replace(text, " ");
    return new XText(StripWsRegex.IsMatch(text) ? StripWsRegex.Replace(text, "") : text);
}

XElement WsNormalizedWithoutElementNamespace(XElement sourceParent)
{
    if (sourceParent.Name.LocalName == "langword")
        return new XElement(XNamespace.None.GetName(XNAME_see), new XAttribute("langword", sourceParent.Value));
    XElement resultElement = new XElement(XNamespace.None.GetName(sourceParent.Name.LocalName));
    foreach (XAttribute attribute in sourceParent.Attributes())
        resultElement.Add(new XAttribute(attribute));
    XNode sourceNode = sourceParent.Nodes().FirstOrDefault(n => n is XElement || n is XText t && !string.IsNullOrWhiteSpace(t.Value));
    if (sourceNode is null)
        return resultElement;
    if (sourceNode is XText text)
        resultElement.Add(ToWhiteSpaceNormalized(text));
    else
        resultElement.Add(WsNormalizedWithoutElementNamespace((XElement)sourceNode));
    while ((sourceNode = sourceNode.NodesAfterSelf().FirstOrDefault(n => n is XElement || n is XText t && (!string.IsNullOrWhiteSpace(t.Value) || (t.NextNode is not null && t.NextNode is not XText)))) is not null)
    {
        if (sourceNode is XText xText)
            resultElement.Add(ToWhiteSpaceNormalized(xText));
        else
            resultElement.Add(WsNormalizedWithoutElementNamespace((XElement)sourceNode));
    }
    return resultElement;
}

XElement WithoutElementNamespace(XElement sourceParent)
{
    if (sourceParent.Name.LocalName == "langword")
        return new XElement(XNamespace.None.GetName(XNAME_see), new XAttribute("langword", sourceParent.Value));
    XElement resultElement = new XElement(XNamespace.None.GetName(sourceParent.Name.LocalName));
    foreach (XAttribute attribute in sourceParent.Attributes())
        resultElement.Add(new XAttribute(attribute));
    XNode sourceNode = sourceParent.Nodes().FirstOrDefault(n => n is XElement || n is XText t && !string.IsNullOrWhiteSpace(t.Value));
    if (sourceNode is null)
        return resultElement;
    if (sourceNode is XText text)
        resultElement.Add(new XText(text));
    else
        resultElement.Add(WithoutElementNamespace((XElement)sourceNode));
    while ((sourceNode = sourceNode.NodesAfterSelf().FirstOrDefault(n => n is XElement || n is XText t && (!string.IsNullOrWhiteSpace(t.Value) || (t.NextNode is not null && t.NextNode is not XText)))) is not null)
    {
        if (sourceNode is XText xText)
            resultElement.Add(new XText(xText));
        else
            resultElement.Add(WithoutElementNamespace((XElement)sourceNode));
    }
    return resultElement;
}

IEnumerable<XElement> GetByNames(XElement source, params XName[] names) => names.SelectMany(n => source.Elements(n));

string[] ToXmlLines(IEnumerable<XElement> elements)
{
    if (elements is null || !elements.Any())
        return Array.Empty<string>();
    using StringWriter stringWriter = new StringWriter();
    XDocument doc = new XDocument(new XElement(WsNormalizedWithoutElementNamespace(elements.First())));
    using (XmlWriter writer = XmlWriter.Create(stringWriter, new XmlWriterSettings() { Indent = true, OmitXmlDeclaration = true }))
    {
        doc.WriteTo(writer);
        writer.Flush();
    }
    foreach (XElement e in elements.Skip(1))
    {
        stringWriter.WriteLine();
        using XmlWriter xmlWriter = XmlWriter.Create(stringWriter, new XmlWriterSettings() { Indent = true, OmitXmlDeclaration = true });
        doc = new XDocument(new XElement(WsNormalizedWithoutElementNamespace(e)));
        doc.WriteTo(xmlWriter);
        xmlWriter.Flush();
    }
    string result = stringWriter.ToString();
    string[] lines = NewLineRegex.IsMatch(result) ? NewLineRegex.Split(result) : new string[] { result };
    int trimLength = lines.Select(t => LeadingWsRegex.Match(t)).Select(m => m.Success ? m.Length : 0).Min();
    return (trimLength > 0) ? lines.Select(t => t.Substring(trimLength)).ToArray() : lines;
}

Type ToUnderlyingType(Type type)
{
    if (type is null)
        return null;
    Type e;
    if (type.HasElementType)
    {
        e = type.GetElementType();
        if (e.IsArray || e.IsPointer)
            return type;
        if (type.IsArray || type.IsPointer)
            return ToUnderlyingType(e).MakeArrayType();
        return ToUnderlyingType(e);
    }

    if (type.IsValueType)
    {
        if (type.IsGenericType && typeof(Nullable<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
            return ToUnderlyingType(Nullable.GetUnderlyingType(type));
        if (type.IsEnum)
            type = Enum.GetUnderlyingType(type);
        if (type.IsPrimitive || type == typeof(decimal) || type == typeof(DateTime) || type == typeof(DateTimeOffset) || type == typeof(TimeSpan) || type == typeof(Guid))
            return type;
    }
    else
    {
        if (type == typeof(string))
            return type;
        if (type == typeof(Uri))
            return typeof(string);
    }
    e = type.GetInterfaces().Where(i => i.IsGenericType && typeof(IEnumerable<>) == i.GetGenericTypeDefinition()).Select(i => i.GetGenericArguments()[0]).FirstOrDefault();
    if (e is not null)
    {
        Type u = ToUnderlyingType(e);
        if (u.IsPrimitive || u == typeof(string) || u == typeof(decimal) || u == typeof(DateTime) || u == typeof(DateTimeOffset) || u == typeof(TimeSpan) || u == typeof(Guid))
            return u.MakeArrayType();
        return e.MakeArrayType();
    }
    return type;
}

string ToSqlTypeName(Type type, out string fullName, out Type dbCompatible)
{
    if (type is null)
    {
        fullName = "NULL";
        dbCompatible = null;
        return fullName;
    }
    dbCompatible = ToUnderlyingType(type);
    if (dbCompatible.IsPrimitive)
    {
        if (dbCompatible == typeof(char))
        {
            fullName = "CHARACTER(1)";
            return "CHARACTER";
        }
        if (dbCompatible == typeof(bool))
            fullName = "BIT";
        else if (dbCompatible == typeof(byte))
            fullName = "UNSIGNED TINYINT";
        else if (dbCompatible == typeof(sbyte))
            fullName = "TINYINT";
        else if (dbCompatible == typeof(short))
            fullName = "SMALLINT";
        else if (dbCompatible == typeof(ushort))
            fullName = "UNSIGNED SMALLINT";
        else if (dbCompatible == typeof(int))
            fullName = "INT";
        else if (dbCompatible == typeof(uint))
            fullName = "UNSIGNED INT";
        else if (dbCompatible == typeof(long))
            fullName = "BIGINT";
        else if (dbCompatible == typeof(ulong))
            fullName = "UNSIGNED BIGINT";
        else
            fullName = "REAL";
    }
    else if (dbCompatible == typeof(decimal))
        fullName = "NUMERIC";
    else if (dbCompatible == typeof(DateTime))
        fullName = "DATETIME";
    else if (dbCompatible == typeof(DateTimeOffset))
        fullName = "DATETIMEOFFSET";
    else if (dbCompatible == typeof(TimeSpan))
        fullName = "TIME";
    else if (dbCompatible == typeof(Guid))
        fullName = "UNIQUEIDENTIFIER";
    else if (dbCompatible == typeof(string))
        fullName = "TEXT";
    else
        fullName = "BLOB";
    return fullName;
}

bool TryGetRange(Type type, out object minValue, out object maxValue)
{
    if (type.HasElementType)
        type = type.GetElementType();
    if (type.IsGenericType && typeof(Nullable<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
        type = ToUnderlyingType(Nullable.GetUnderlyingType(type));
    if (type == typeof(string))
    {
        minValue = maxValue = null;
        return false;
    }
    if (type.IsEnum)
    {
        Array values = Enum.GetValues(type);
        Array.Sort(values);
        minValue = values.GetValue(0);
        if (type.GetCustomAttribute<FlagsAttribute>() is null)
            maxValue = values.GetValue(values.Length - 1);
        else if (type == typeof(byte))
            maxValue = Enum.ToObject(type, values.Cast<byte>().Aggregate((x, y) => (byte)(x | y)));
        else if (type == typeof(sbyte))
            maxValue = Enum.ToObject(type, values.Cast<sbyte>().Aggregate((x, y) => (sbyte)(x | y)));
        else if (type == typeof(short))
            maxValue = Enum.ToObject(type, values.Cast<short>().Aggregate((x, y) => (short)(x | y)));
        else if (type == typeof(ushort))
            maxValue = Enum.ToObject(type, values.Cast<ushort>().Aggregate((x, y) => (ushort)(x | y)));
        else if (type == typeof(int))
            maxValue = Enum.ToObject(type, values.Cast<int>().Aggregate((x, y) => x | y));
        else if (type == typeof(uint))
            maxValue = Enum.ToObject(type, values.Cast<uint>().Aggregate((x, y) => x | y));
        else if (type == typeof(ulong))
            maxValue = Enum.ToObject(type, values.Cast<ulong>().Aggregate((x, y) => x | y));
        else
            maxValue = Enum.ToObject(type, values.Cast<long>().Aggregate((x, y) => x | y));
        return true;
    }
    if (type.IsPrimitive)
    {
        if (type == typeof(byte))
        {
            minValue = byte.MinValue;
            maxValue = byte.MaxValue;
        }
        else if (type == typeof(sbyte))
        {
            minValue = sbyte.MinValue;
            maxValue = sbyte.MaxValue;
        }
        else if (type == typeof(short))
        {
            minValue = short.MinValue;
            maxValue = short.MaxValue;
        }
        else if (type == typeof(ushort))
        {
            minValue = ushort.MinValue;
            maxValue = ushort.MaxValue;
        }
        else if (type == typeof(int))
        {
            minValue = int.MinValue;
            maxValue = int.MaxValue;
        }
        else if (type == typeof(uint))
        {
            minValue = uint.MinValue;
            maxValue = uint.MaxValue;
        }
        else if (type == typeof(long))
        {
            minValue = long.MinValue;
            maxValue = long.MaxValue;
        }
        else if (type == typeof(ulong))
        {
            minValue = ulong.MinValue;
            maxValue = ulong.MaxValue;
        }
        else if (type == typeof(float))
        {
            minValue = float.MinValue;
            maxValue = float.MaxValue;
        }
        else
        {
            minValue = maxValue = null;
            return false;
        }
        return true;
    }

    Type e = type.GetInterfaces().Where(i => i.IsGenericType && typeof(IEnumerable<>) == i.GetGenericTypeDefinition()).Select(i => i.GetGenericArguments()[0]).FirstOrDefault();
    if (e is not null && e.IsValueType)
        return TryGetRange(e, out minValue, out maxValue);
    minValue = maxValue = null;
    return false;
}
*/

internal static T GetProperty<T>(EnvDTE.Properties properties, string key, T defaultValue = default(T))
{
	try { return (T)(properties.Item(key).Value); }
	catch { return defaultValue; }
}

internal static Version GetPropertyVersion(EnvDTE.Properties properties, string key, Version defaultValue = null)
{
	string s = GetProperty<string>(properties, key);
	Version v;
	if (String.IsNullOrEmpty(s) || !Version.TryParse(s.Trim(), out v))
		return defaultValue;

	if (v.Revision != 0)
		return v;

	if (v.Build == 0)
		return new Version(v.Major, v.Minor);

	return new Version(v.Major, v.Minor, v.Build);
}

internal static Guid? GetPropertyGuid(EnvDTE.Properties properties, string key, Guid? defaultValue = null)
{
	string s = GetProperty<string>(properties, key);
	Guid g;
	if (String.IsNullOrEmpty(s) || !Guid.TryParse(s.Trim(), out g))
		return defaultValue;

	return g;
}

internal static string GetPropertyString(EnvDTE.Properties properties, string key, string defaultValue = null)
{
	string s = GetProperty<string>(properties, key);
	if (defaultValue == null || !String.IsNullOrEmpty(s))
		return s;
	return defaultValue;
}

T GetCurrentItemProperty<T>(string key, T defaultValue = default(T))
{
	return GetProperty<T>(TemplateItem.Properties, key, defaultValue);
}

string GetCurrentItemPropertyString(string key, string defaultValue = null)
{
	return GetPropertyString(TemplateItem.Properties, key, defaultValue);
}

Version GetCurrentItemPropertyVersion(string key, Version defaultValue = null)
{
	return GetPropertyVersion(TemplateItem.Properties, key, defaultValue);
}

Guid? GetCurrentItemPropertyGuid(string key, Guid? defaultValue = null)
{
	return GetPropertyGuid(TemplateItem.Properties, key, defaultValue);
}

class ProjectInfoObject
{
	internal string Title { get { return GetProjectPropertyString("Title", ""); } }
	internal string Product { get { return GetProjectPropertyString("Product", ""); } }
	internal string Name { get { return _project.Name; } }
	internal string Description { get { return GetProjectPropertyString("Description", ""); } }
	internal string Copyright { get { return GetProjectPropertyString("Copyright", ""); } }
	internal string Company { get { return GetProjectPropertyString("Company", ""); } }

	internal string RootNamespace { get { return GetProjectPropertyString("RootNamespace", ""); } }
	internal Version AssemblyVersion { get { return GetProjectPropertyVersion("AssemblyVersion"); } }
	internal string FileName { get { return GetProjectPropertyString("FileName", ""); } }
	internal string ApplicationIcon { get { return GetProjectPropertyString("ApplicationIcon", ""); } }
	internal string OutputFileName { get { return GetProjectPropertyString("OutputFileName", ""); } }
	internal Guid? AssemblyGuid { get { return GetProjectPropertyGuid("AssemblyGuid"); } }
	internal string FullPath { get { return GetProjectPropertyString("FullPath", ""); } }
	internal Version AssemblyFileVersion { get { return GetProjectPropertyVersion("AssemblyFileVersion"); } }
	internal string AssemblyName { get { return GetProjectPropertyString("AssemblyName", ""); } }
	internal string LocalPath { get { return GetProjectPropertyString("LocalPath", ""); } }
	internal string DefaultNamespace { get { return GetProjectPropertyString("DefaultNamespace", ""); } }

	internal string FullName { get { return _project.FullName; } }
	internal string SolutionName { get { return GetProjectPropertyString("SolutionName", ""); } }
	internal string TargetFileName { get { return GetProjectPropertyString("TargetFileName", ""); } }
	internal string TargetFrameworkName { get { return (TargetFrameworkMoniker.Keys[0] != null) ? TargetFrameworkMoniker.Keys[0] : ""; } }
	internal Version TargetFrameworkVersion
	{
		get
		{
			Version v;
			if (!String.IsNullOrEmpty(TargetFrameworkMoniker["Version"]) && Version.TryParse((TargetFrameworkMoniker["Version"].StartsWith("v")) ? TargetFrameworkMoniker["Version"].Substring(1) : TargetFrameworkMoniker["Version"], out v))
				return v;

			return null;
		}
	}
	internal Guid FileKind
	{
		get
		{
			Guid g;
			if (Guid.TryParse(EnvDTE.Constants.vsProjectItemKindPhysicalFile, out g))
				return g;
			throw new Exception(String.Format("\"{0}\" (from EnvDTE.Constants.vsProjectItemKindPhysicalFile) is not a valid Guid.", EnvDTE.Constants.vsProjectItemKindPhysicalFile));
		}
	}
	internal System.Collections.Specialized.NameValueCollection TargetFrameworkMoniker
	{
		get
		{
			if (_targetFrameworkMoniker == null)
			{
				_targetFrameworkMoniker = new System.Collections.Specialized.NameValueCollection();
				System.Text.RegularExpressions.Regex keyValueRegex = new System.Text.RegularExpressions.Regex(@"(^|,)(?<k>[^=,]*)(=(?<v>[^,]*))?");
				string s = GetProjectPropertyString("TargetFrameworkMoniker") ?? "";
				foreach (System.Text.RegularExpressions.Match m in keyValueRegex.Matches(s.Trim()))
				{
					if (m.Groups["v"].Success)
						_targetFrameworkMoniker.Add(m.Groups["k"].Value, m.Groups["v"].Value);
					else
						_targetFrameworkMoniker.Add(m.Groups["k"].Value, null);
				}
			}

			return _targetFrameworkMoniker;
		}
	}
	private EnvDTE.Project _project;
	private System.Collections.Specialized.NameValueCollection _targetFrameworkMoniker = null;

	internal ProjectInfoObject(EnvDTE.Project project)
	{
		_project = project;
	}
	internal T GetProjectProperty<T>(string key, T defaultValue = default(T))
	{
		return GetProperty<T>(_project.Properties, key, defaultValue);
	}
	internal string GetProjectPropertyString(string key, string defaultValue = null)
	{
		return GetPropertyString(_project.Properties, key, defaultValue);
	}
	internal Version GetProjectPropertyVersion(string key, Version defaultValue = null)
	{
		return GetPropertyVersion(_project.Properties, key, defaultValue);
	}
	internal Guid? GetProjectPropertyGuid(string key, Guid? defaultValue = null)
	{
		return GetPropertyGuid(_project.Properties, key, defaultValue);
	}
}

#>
