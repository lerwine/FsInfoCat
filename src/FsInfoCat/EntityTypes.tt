<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="core.ttinclude" #>
<#@ output extension=".cs" #>
using FsInfoCat.Collections;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;

namespace <#=DefaultNamespace#>
{
<#
XName localName = XName.Get("Local");
XName upstreamName = XName.Get("Local");

PushIndent("    ");
bool isSubsequentMember = GenerateEnumTypes(EntityDefinitionsDocument.Root.Elements("Root").Elements("EnumTypes").Elements());
GenerateEntityTypes(EntityDefinitionsDocument.Root.Elements("Root").Elements("Entity"), isSubsequentMember);
PopIndent();
#>
}

namespace <#=DefaultNamespace#>.Local
{
<#

PushIndent("    ");
isSubsequentMember = GenerateEnumTypes(EntityDefinitionsDocument.Root.Elements("Local").Elements("EnumTypes").Elements());
GenerateEntityTypes(EntityDefinitionsDocument.Root.Elements("Local").Elements("Entity"), isSubsequentMember);
PopIndent();
#>
}

namespace <#=DefaultNamespace#>.Upstream
{
<#

PushIndent("    ");
isSubsequentMember = GenerateEnumTypes(EntityDefinitionsDocument.Root.Elements("Upstream").Elements("EnumTypes").Elements());
GenerateEntityTypes(EntityDefinitionsDocument.Root.Elements("Upstream").Elements("Entity"), isSubsequentMember);
PopIndent();
#>
}

<#+

void GetAllBaseTypes(XElement entityElement, Collection<XElement> result, IEnumerable<XElement> scopeElements)
{
    int start = result.Count;
    XAttribute attribute = entityElement.Elements("ExtendsEntity").Attributes("Type").FirstOrDefault();
    if (attribute is not null)
    {
        string name = attribute.Value;
        if ((attribute = scopeElements.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !(ReferenceEquals(entityElement, attribute.Parent) || result.Contains(attribute.Parent)))
            result.Add(attribute.Parent);
    }
    attribute = entityElement.Elements("ExtendsGenericEntity").Attributes("TypeDef").FirstOrDefault();
    if (attribute is not null)
    {
        string name = attribute.Value;
        if ((attribute = scopeElements.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !(ReferenceEquals(entityElement, attribute.Parent) || result.Contains(attribute.Parent)))
            result.Add(attribute.Parent);
    }
    attribute = entityElement.Attribute("RootInterface");
    if (attribute is not null)
    {
        string name = attribute.Value;
        if ((attribute = scopeElements.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !(ReferenceEquals(entityElement, attribute.Parent) || result.Contains(attribute.Parent)))
            result.Add(attribute.Parent);
    }
    foreach (XAttribute attr in entityElement.Elements("ImplementsEntity").Attributes("Type"))
    {
        string name = attr.Value;
        if ((attribute = scopeElements.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !(ReferenceEquals(entityElement, attribute.Parent) || result.Contains(attribute.Parent)))
            result.Add(attribute.Parent);
    }
    foreach (XAttribute attr in entityElement.Elements("ImplementsGenericEntity").Attributes("TypeDef"))
    {
        string name = attr.Value;
        if ((attribute = scopeElements.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !(ReferenceEquals(entityElement, attribute.Parent) || result.Contains(attribute.Parent)))
            result.Add(attribute.Parent);
    }
    int end = result.Count;
    for (int i = start; i < end; i++)
        GetAllBaseTypes(result[i], result, scopeElements);
}

Collection<XElement> GetAllBaseTypes(XElement entityElement)
{
    Collection<XElement> result = new();
    switch (entityElement.Parent.Name.LocalName)
    {
        case "Local":
            GetAllBaseTypes(entityElement, result, EntityDefinitionsDocument.Root.Elements("Local").Elements("Entity").Concat(EntityDefinitionsDocument.Root.Elements("Root").Elements("Entity")));
            break;
        case "Upstream":
            GetAllBaseTypes(entityElement, result, EntityDefinitionsDocument.Root.Elements("Upstream").Elements("Entity").Concat(EntityDefinitionsDocument.Root.Elements("Root").Elements("Entity")));
            break;
        default:
            GetAllBaseTypes(entityElement, result, EntityDefinitionsDocument.Root.Elements("Root").Elements("Entity"));
            break;
    }
    return result;
}

IEnumerable<XElement> GetBaseTypes(XElement entityElement)
{
    IEnumerable<XElement> source;
    switch (entityElement.Parent.Name.LocalName)
    {
        case "Local":
            source = EntityDefinitionsDocument.Root.Elements("Local").Elements("Entity").Concat(EntityDefinitionsDocument.Root.Elements("Root").Elements("Entity"));
            break;
        case "Upstream":
            source = EntityDefinitionsDocument.Root.Elements("Upstream").Elements("Entity").Concat(EntityDefinitionsDocument.Root.Elements("Root").Elements("Entity"));
            break;
        default:
            source = EntityDefinitionsDocument.Root.Elements("Root").Elements("Entity");
            break;
    }
    XAttribute attribute = entityElement.Elements("ExtendsEntity").Attributes("Type").FirstOrDefault();
    if (attribute is not null)
    {
        string name = attribute.Value;
        if ((attribute = source.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !ReferenceEquals(entityElement, attribute.Parent))
            yield return attribute.Parent;
    }
    attribute = entityElement.Elements("ExtendsGenericEntity").Attributes("TypeDef").FirstOrDefault();
    if (attribute is not null)
    {
        string name = attribute.Value;
        if ((attribute = source.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !ReferenceEquals(entityElement, attribute.Parent))
            yield return attribute.Parent;
    }
    attribute = entityElement.Attribute("RootInterface");
    if (attribute is not null)
    {
        string name = attribute.Value;
        if ((attribute = source.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !ReferenceEquals(entityElement, attribute.Parent))
            yield return attribute.Parent;
    }
    foreach (XAttribute attr in entityElement.Elements("ImplementsEntity").Attributes("Type"))
    {
        string name = attr.Value;
        if ((attribute = source.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !ReferenceEquals(entityElement, attribute.Parent))
            yield return attribute.Parent;
    }
    foreach (XAttribute attr in entityElement.Elements("ImplementsGenericEntity").Attributes("TypeDef"))
    {
        string name = attr.Value;
        if ((attribute = source.Attributes("Name").Where(a => a.Value == name).FirstOrDefault()) is not null && !ReferenceEquals(entityElement, attribute.Parent))
            yield return attribute.Parent;
    }
}

bool GenerateEnumTypes(IEnumerable<XElement> enumElements)
{
    if (!enumElements.Any())
        return false;
    GenerateEnumType(enumElements.First());
    foreach (XElement typeElement in enumElements.Skip(1))
    {
        WriteLine("");
        GenerateEnumType(typeElement);
    }
    return true;
}

void WriteAmbientValueAttribute(XElement memberElement)
{
    string ambientValue = memberElement.Elements("AmbientString").Attributes("Value").Select(a => a.Value).FirstOrDefault();
    if (ambientValue is not null)
    {
        Write("[AmbientValue(\"");
        Write(ambientValue.Replace("\\", "\\\\").Replace("\"", "\\\"").Replace("\r", "\\r").Replace("\n", "\\n"));
        WriteLine("\")]");
        return;
    }
    foreach (string name in new[] { "AmbientEnum", "AmbientBoolean", "AmbientInt" })
    {
        ambientValue = memberElement.Elements(name).Attributes("Value").Select(a => a.Value).FirstOrDefault();
        if (!string.IsNullOrWhiteSpace(ambientValue))
        {
            Write("[AmbientValue(");
            Write(ambientValue);
            WriteLine(")]");
            return;
        }
    }
    ambientValue = memberElement.Elements("AmbientUInt").Attributes("Value").Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine("u)]");
        return;
    }
    ambientValue = memberElement.Elements("AmbientLong").Attributes("Value").Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine("L)]");
        return;
    }
    ambientValue = memberElement.Elements("AmbientULong").Attributes("Value").Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine("UL)]");
        return;
    }
    ambientValue = memberElement.Elements("AmbientDouble").Attributes("Value").Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine(ambientValue.Contains(".") ? ")]" : ".0)]");
        return;
    }
    foreach (string name in new[] { "AmbientByte", "AmbientSByte", "AmbientShort", "AmbientUShort", "AmbientDouble" })
    {
        ambientValue = memberElement.Elements("AmbientByte").Attributes("Value").Select(a => a.Value).FirstOrDefault();
        if (!string.IsNullOrWhiteSpace(ambientValue))
        {
            Write("[AmbientValue((");
            Write(name.Substring(7).ToLower());
            Write(")");
            Write(ambientValue);
            WriteLine(")]");
            return;
        }
    }
}

string WriteDisplayAttribute(XElement memberElement, string typeName = null)
{
    string memberName = memberElement.Attribute("Name")?.Value;
    string displayNameResource = memberElement.Attributes("DisplayNameResource").Select(a => a.Value).DefaultIfEmpty(string.IsNullOrWhiteSpace(typeName) ? $"DisplayName_{memberName}" : $"DisplayName_{typeName}_{memberName}").First();
    string descriptionResource = memberElement.Attributes("DescriptionResource").Select(a => a.Value).FirstOrDefault();
    string resourceType = memberElement.Attributes("ResourceType").Select(a => a.Value).DefaultIfEmpty("Properties.Resources").First();
    if (string.IsNullOrWhiteSpace(displayNameResource))
    {
        if (!string.IsNullOrWhiteSpace(descriptionResource))
        {
            Write("[Display(Description = nameof(");
            Write(resourceType);
            Write(".");
            Write(descriptionResource);
            WriteLine("), ResourceType = typeof(Properties.Resources))]");
        }
    }
    else
    {
        Write("[Display(Name = nameof(");
        Write(resourceType);
        Write(".");
        Write(displayNameResource);
        if (!string.IsNullOrWhiteSpace(descriptionResource))
        {
            Write("), Description = nameof(");
            Write(resourceType);
            Write(".");
            Write(descriptionResource);
        }
        Write("), ResourceType = typeof(");
        Write(resourceType);
        WriteLine("))]");
    }
    return memberName;
}

void GenerateEnumType(XElement enumElement)
{
    GenerateXmlDoc(enumElement.Element("summary"));
    GenerateXmlDoc(enumElement.Element("remarks"));
    foreach (XElement e in enumElement.Elements("seealso"))
    {
        if (!e.IsEmpty && e.Value.Trim().Length == 0)
            e.RemoveAll();
        GenerateXmlDoc(e);
    }
    if (enumElement.Attributes("IsFlags").Any(a => a.Value == "true"))
        WriteLine("[Flags]");
    Write("public enum ");
    string typeName = enumElement.Attribute("Name")?.Value;
    Write(typeName);
    Write(" : ");
    WriteLine(enumElement.Name.LocalName.ToLower());
    WriteLine("{");
    PushIndent("    ");
    bool isSubsequentMember = false;
    foreach (XElement fieldElement in enumElement.Elements("Field"))
    {
        if (isSubsequentMember)
        {
            WriteLine(",");
            WriteLine("");
            isSubsequentMember = true;
        }
        else
            isSubsequentMember = true;
        GenerateXmlDoc(fieldElement.Element("summary"));
        GenerateXmlDoc(fieldElement.Element("remarks"));
        foreach (XElement e in fieldElement.Elements("seealso"))
        {
            if (!e.IsEmpty && e.Value.Trim().Length == 0)
                e.RemoveAll();
            GenerateXmlDoc(e);
        }
        WriteAmbientValueAttribute(fieldElement);
        string fieldName = WriteDisplayAttribute(fieldElement, typeName);
        Write(fieldName);
        Write(" = ");
        Write(fieldElement.Attribute("Value")?.Value);
    }

    PopIndent();
    WriteLine("");
    WriteLine("}");
}

void GenerateEntityTypes(IEnumerable<XElement> entityElements, bool isSubsequentMember)
{
    if (isSubsequentMember)
        WriteLine("");
    GenerateEntityInterface(entityElements.First());
    foreach (XElement typeElement in entityElements.Skip(1))
    {
        WriteLine("");
        GenerateEntityInterface(typeElement);
    }
}

void GenerateEntityInterface(XElement entityElement)
{
    GenerateXmlDoc(entityElement.Element("summary"));
    foreach (XElement e in entityElement.Elements("typeparam"))
        GenerateXmlDoc(e);
    GenerateXmlDoc(entityElement.Element("remarks"));

    Collection<string> implements = new();
    XAttribute attribute = entityElement.Elements("ExtendsEntity").Attributes("Type").FirstOrDefault();
    if (attribute is not null)
        implements.Add(attribute.Value);
    attribute = entityElement.Elements("ExtendsGenericEntity").Attributes("Type").FirstOrDefault();
    if (attribute is not null)
        implements.Add(attribute.Value);
    attribute = entityElement.Elements("BaseType").Attributes("Type").FirstOrDefault();
    if (attribute is not null)
        implements.Add(attribute.Value);
    attribute = entityElement.Attribute("RootInterface");
    if (attribute is not null)
        implements.Add(attribute.Value);
    foreach (XAttribute attr in entityElement.Elements("ImplementsEntity").Attributes("Type"))
        implements.Add(attr.Value);
    foreach (XAttribute attr in entityElement.Elements("ImplementsGenericEntity").Attributes("Type"))
        implements.Add(attr.Value);
    foreach (XAttribute attr in entityElement.Elements("Implements").Attributes("Type"))
        implements.Add(attr.Value);

    foreach (XElement e in entityElement.Elements("seealso").Concat(implements.Select(s => new XElement("seealso", new XAttribute("cref", s)))))
    {
        if (!e.IsEmpty && e.Value.Trim().Length == 0)
            e.RemoveAll();
        GenerateXmlDoc(e);
    }
    string typeName = entityElement.Attribute("Name")?.Value.Replace("{", "<").Replace("}", ">");
    Write("public interface ");
    if (implements.Count > 0)
    {
        Write(typeName);
        Write(" : ");
        if (implements.Skip(1).Any())
        {
            foreach (string t in implements.Reverse().Skip(1).Reverse())
            {
                Write(t.Replace("{", "<").Replace("}", ">"));
                Write(", ");
            }
        }
        WriteLine(implements.Last().Replace("{", "<").Replace("}", ">"));
    }
    else
        WriteLine(typeName);
    WriteLine("{");
    PushIndent("    ");
    bool isSubsequentMember = false;
    string[] baseProperties = GetAllBaseTypes(entityElement).Elements("Properties").Elements().Attributes("Name").Select(a => a.Value).Distinct().ToArray();
    foreach (XElement propertyElement in entityElement.Elements("Properties").Elements())
    {
        if (propertyElement.Name.NamespaceName.Length > 0)
            continue;
        if (isSubsequentMember)
            WriteLine("");
        else
            isSubsequentMember = true;
        GenerateXmlDoc(propertyElement.Element("summary"));
        GenerateXmlDoc(propertyElement.Element("value"));
        GenerateXmlDoc(propertyElement.Element("remarks"));
        foreach (XElement e in propertyElement.Elements("seealso"))
        {
            if (!e.IsEmpty && e.Value.Trim().Length == 0)
                e.RemoveAll();
            GenerateXmlDoc(e);
        }
        string propertyName = WriteDisplayAttribute(propertyElement);
        if (baseProperties.Contains(propertyName))
            Write("new ");
        switch (propertyElement.Name.LocalName)
        {
            case "Byte":
            case "SByte":
            case "Short":
            case "UShort":
            case "Int":
            case "UInt":
            case "Long":
            case "ULong":
            case "Double":
                Write(propertyElement.Name.LocalName.ToLower());
                Write(propertyElement.Attributes("IsNullable").Any(a => a.Value == "true") ? "? " : " ");
                break;
            case "ByteArray":
                Write("byte[] ");
                break;
            case "Text":
            case "NVarChar":
                Write("string ");
                break;
            case "VolumeIdentifier":
            case "DriveType":
            case "MD5Hash":
            case "DateTime":
                Write(propertyElement.Name.LocalName);
                Write(propertyElement.Attributes("IsNullable").Any(a => a.Value == "true") ? "? " : " ");
                break;
            case "ByteValues":
            case "MultiStringValue":
                Write(propertyElement.Name.LocalName);
                Write(" ");
                break;
            case "UniqueIdentifier":
                Write(propertyElement.Attributes("IsNullable").Any(a => a.Value == "true") ? "Guid? " : "Guid ");
                break;
            case "Bit":
                Write(propertyElement.Attributes("IsNullable").Any(a => a.Value == "true") ? "bool? " : "bool ");
                break;
            case "Enum":
                Write(propertyElement.Attribute("Type")?.Value);
                Write(propertyElement.Attributes("IsNullable").Any(a => a.Value == "true") ? "? " : " ");
                break;
            case "CollectionNavigation":
                Write("IEnumerable<");
                Write(propertyElement.Attribute("ItemType")?.Value);
                Write("> ");
                break;
            case "RelatedEntity":
                Write(propertyElement.Attribute("TypeParam")?.Value ?? propertyElement.Attribute("Reference")?.Value);
                Write(" ");
                break;
            default:
                Write("#warning Unknown element: ");
                WriteLine(propertyElement.Name.LocalName);
                Write("object ");
                break;
        }

        Write(propertyName);
        WriteLine(propertyElement.Attributes("IsGenericWritable").Any(a => a.Value == "true") ? " { get; set; }" : " { get; }");
    }

    PopIndent();
    WriteLine("}");
}

Regex LeadingEmptyLine = new Regex(@"^([^\r\n\S]+)?(\r\n?|\n)", RegexOptions.Compiled);
Regex TrailingEmptyLine = new Regex(@"(\r\n?|\n)([^\r\n\S]+)?$", RegexOptions.Compiled);
Regex TrailingWsRegex = new Regex(@"\s+$", RegexOptions.Compiled);

void GenerateXmlDoc(XElement xmlDocElement)
{
    if (xmlDocElement is null)
        return;
    if (xmlDocElement.IsEmpty)
    {
        foreach (string lt in NewLineRegex.Split(xmlDocElement.ToString(SaveOptions.None)))
        {
            Write("/// ");
            WriteLine(lt.Trim());
        }
        return;
    }
    if (xmlDocElement.LastNode is XText lastNode)
    {
        while (lastNode.PreviousNode is XText previousTextNode)
        {
            lastNode.Value = $"{previousTextNode.Value}{lastNode.Value}";
            previousTextNode.Remove();
        }
        if (!TrailingEmptyLine.IsMatch(lastNode.Value))
            lastNode.Value = $"{lastNode.Value}\n";
    }
    else
    {
        lastNode = new XText("\n");
        xmlDocElement.Add(lastNode);
    }
    if (xmlDocElement.FirstNode is XText firstNode)
    {
        while (firstNode.NextNode is XText followingTextNode)
        {
            firstNode.Value = $"{firstNode.Value}{followingTextNode.Value}";
            followingTextNode.Remove();
        }
        if (ReferenceEquals(firstNode, lastNode))
        {
            if (LeadingEmptyLine.Match(firstNode.Value).Length < firstNode.Value.Length)
                firstNode.Value = $"\n{firstNode.Value}";
        }
        else if (!LeadingEmptyLine.IsMatch(firstNode.Value))
            firstNode.Value = $"\n{firstNode.Value}";
    }
    else
        xmlDocElement.FirstNode.AddBeforeSelf(new XText("\n"));
    IEnumerable<string> lines = NewLineRegex.Split(xmlDocElement.ToString(SaveOptions.None));
    if (!(lines.Skip(2).Any() && (lines = lines.Take(1).Concat(lines.Skip(1).SkipWhile(s => string.IsNullOrWhiteSpace(s))).ToArray()).Skip(3).Any() &&
        (lines = lines.Reverse().Take(1).Concat(lines.Reverse().Skip(1).SkipWhile(s => string.IsNullOrWhiteSpace(s))).Reverse().ToArray()).Skip(3).Any()))
    {
        Write("/// ");
        Write(lines.First());
        if (lines.Skip(2).Any())
            Write(lines.Skip(1).First().Trim());
        WriteLine(lines.Last().Trim());
        return;
    }
    
    if (LeadingWsRegex.IsMatch(lines.Skip(1).First()))
    {
        int indent = lines.Skip(1).Reverse().Skip(1).Reverse().Select(s => LeadingWsRegex.Match(s)).Select(m => m.Success ? m.Length : 0).Min();
        if (indent > 0)
            lines = lines.Take(1).Concat(lines.Skip(1).Reverse().Skip(1).Reverse().Select(s => s.Substring(indent))).Concat(lines.Reverse().Take(1));
    }
    else
    {
        int indent = lines.Skip(2).Reverse().Skip(1).Reverse().Select(s => LeadingWsRegex.Match(s)).Select(m => m.Success ? m.Length : 0).Min();
        if (indent > 0)
            lines = lines.Take(2).Concat(lines.Skip(2).Reverse().Skip(1).Reverse().Select(s => s.Substring(indent))).Concat(lines.Reverse().Take(1));
    }

    Write("/// ");
    WriteLine(lines.First());
    foreach (string s in lines.Skip(1).Reverse().Skip(1).Reverse())
    {
        Write("/// ");
        WriteLine(s.TrimEnd());
    }
    Write("/// ");
    WriteLine(lines.Last().Trim());
}
#>
