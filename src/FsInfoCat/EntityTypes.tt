<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.ObjectModel" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="core.ttinclude" #>
<#@ output extension=".cs" #>
using FsInfoCat.Collections;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.IO;

namespace <#=DefaultNamespace#>
{
<#

//    XElement FindRootPropertyByFullName(string fullName); // "/EntityDefinition/Root/Entity/Properties/*"
//
//    XElement FindRootFieldByFullName(string fullName); // "/EntityDefinition/Root/EnumTypes/*/Field"
//
//    XElement FindRootMemberByFullName(string fullName); // "/EntityDefinition/Root/(Entity/Properties/*|EnumTypes/*/Field)"
//
//    XElement FindLocalPropertyByFullName(string fullName); // "/EntityDefinition/(Root|Local)/Entity/Properties/*"
//
//    XElement FindLocalFieldByFullName(string fullName); // "/EntityDefinition/(Root|Local)/EnumTypes/*/Field"
//
//    XElement FindLocalMemberByFullName(string fullName); // "/EntityDefinition/(Root|Local)/(Entity/Properties/*|EnumTypes/*/Field)"
//
//    XElement FindUpstreamPropertyByFullName(string fullName); // "/EntityDefinition/(Root|Upstream)/Entity/Properties/*"
//
//    XElement FindUpstreamFieldByFullName(string fullName); // "/EntityDefinition/(Root|Upstream)/EnumTypes/*/Field"
//
//    XElement FindUpstreamMemberByFullName(string fullName); // "/EntityDefinition/(Root|Upstream)/(Entity/Properties/*|EnumTypes/*/Field)"
//
//    "/EntityDefinitions/*/Entity/Properties/Enum""
//    XElement GetEnumPropertyEnumType(XElement enumPropertyElement); // "./@Type" => "/EntityDefinition/*/EnumTypes/*"
//
//    "/EntityDefinitions/*/Entity/Properties/Enum"
//    XElement GetEnumPropertyDefaultField(XElement enumPropertyElement); // "./Default" => "/EntityDefinition/*/EnumTypes/*/Field"
//
//    "/EntityDefinitions/*/EnumTypes/*/Field"
//    XElement GetEnumFieldAmbientEnumField(XElement enumFieldElement); // "./AmbientEnum/@Value" => "/EntityDefinitions/*/EnumTypes/*/Field"
//
//    "/EntityDefinitions/*/Entity/Properties/(CollectionNavigation|NewCollectionNavigation)"
//    XElement GetCollectionNavigationItemEntity(XElement collectionNavigationPropertyElement); // "./@ItemType" => "/EntityDefinitions/*/Entity"
//
//    "/EntityDefinitions/*/Entity"
//    IEnumerable<GetBaseEntities> GetBaseEntities(XElement entityElement); // "./((ExtendsEntity|ImplementsEntity)/@Type|(ExtendsGenericEntity|ImplementsGenericEntity)/@TypeDef)"
//                                                                            => "/EntityDefinitions/*/Entity"
//
//    "/EntityDefinitions/*/Entity/Properties/(RelatedEntity|NewRelatedEntity)"
//    XElement GetRelatedEntityPrimaryKeyProperty(XElement relatedEntityPropertyElement); // "./@PrimaryKey" => "/EntityDefinitions/*/Entity"
//
//    "/EntityDefinitions/*/Entity/Properties/(CollectionNavigation|NewCollectionNavigation)"
//    XElement GetCollectionNavigationForeignKeyProperty(XElement collectionNavigationPropertyElement); // "./@ForeignKey" => "/EntityDefinitions/*/Entity"

PushIndent("    ");
bool isSubsequentMember = GenerateEnumTypes(EntityDefinitionsDocument.Root.Elements(XNAME_Root).Elements(XNAME_EnumTypes).Elements());
GenerateEntityTypes(EntityDefinitionsDocument.Root.Elements(XNAME_Root).Elements(XNAME_Entity), isSubsequentMember);
PopIndent();

#>
}

namespace <#=DefaultNamespace#>.Local
{
<#

PushIndent("    ");
//XElement element = FindLocalByName("IAccessError");
//WriteLine((element is null) ? "yes" : "no");
    
isSubsequentMember = GenerateEnumTypes(EntityDefinitionsDocument.Root.Elements(XNAME_Local).Elements(XNAME_EnumTypes).Elements());
GenerateEntityTypes(EntityDefinitionsDocument.Root.Elements(XNAME_Local).Elements(XNAME_Entity), isSubsequentMember);
PopIndent();
#>
}

namespace <#=DefaultNamespace#>.Upstream
{
<#

PushIndent("    ");
isSubsequentMember = GenerateEnumTypes(EntityDefinitionsDocument.Root.Elements(XNAME_Upstream).Elements(XNAME_EnumTypes).Elements());
GenerateEntityTypes(EntityDefinitionsDocument.Root.Elements(XNAME_Upstream).Elements(XNAME_Entity), isSubsequentMember);
PopIndent();
#>
}

 
<#+

XName XNAME_Root = XName.Get("Root");
XName XNAME_Upstream = XName.Get("Upstream");
XName XNAME_Local = XName.Get("Local");
XName XNAME_Entity = XName.Get("Entity");
XName XNAME_Enum = XName.Get("Enum");
XName XNAME_Name = XName.Get("Name");
XName XNAME_FullName = XName.Get("FullName");
XName XNAME_Field = XName.Get("Field");
XName XNAME_CollectionNavigation = XName.Get("CollectionNavigation");
XName XNAME_NewCollectionNavigation = XName.Get("NewCollectionNavigation");
XName XNAME_RelatedEntity = XName.Get("RelatedEntity");
XName XNAME_NewRelatedEntity = XName.Get("NewRelatedEntity");
XName XNAME_ItemType = XName.Get("ItemType");
XName XNAME_Reference = XName.Get("Reference");
XName XNAME_AmbientEnum = XName.Get("AmbientEnum");
XName XNAME_Default = XName.Get("Default");
XName XNAME_Value = XName.Get("Value");
XName XNAME_EnumTypes = XName.Get("EnumTypes");
XName XNAME_Properties = XName.Get("Properties");
XName XNAME_ExtendsEntity = XName.Get("ExtendsEntity");
XName XNAME_ExtendsGenericEntity = XName.Get("ExtendsGenericEntity");
XName XNAME_Implements = XName.Get("Implements");
XName XNAME_ImplementsEntity = XName.Get("ImplementsEntity");
XName XNAME_ImplementsGenericEntity = XName.Get("ImplementsGenericEntity");
XName XNAME_RootInterface = XName.Get("RootInterface");
XName XNAME_Type = XName.Get("Type");
XName XNAME_TypeDef = XName.Get("TypeDef");
XName XNAME_PrimaryKey = XName.Get("PrimaryKey");
XName XNAME_ForeignKey = XName.Get("ForeignKey");
XName XNAME_AmbientBoolean = XName.Get("AmbientBoolean");
XName XNAME_AmbientInt = XName.Get("AmbientInt");
XName XNAME_AmbientByte = XName.Get("AmbientByte");
XName XNAME_AmbientSByte = XName.Get("AmbientSByte");
XName XNAME_AmbientShort = XName.Get("AmbientShort");
XName XNAME_AmbientUShort = XName.Get("AmbientUShort");
XName XNAME_AmbientFloat = XName.Get("AmbientFloat");
XName XNAME_AmbientDouble = XName.Get("AmbientDouble");
XName XNAME_summary = XName.Get("summary");
XName XNAME_remarks = XName.Get("remarks");
XName XNAME_seealso = XName.Get("seealso");
XName XNAME_IsFlags = XName.Get("IsFlags");
XName XNAME_typeparam = XName.Get("typeparam");
XName XNAME_cref = XName.Get("cref");
XName XNAME_NewIdNavRef = XName.Get("NewIdNavRef");
XName XNAME_UniqueIdentifier = XName.Get("UniqueIdentifier");
XName XNAME_value = XName.Get("value");
XName XNAME_DefaultNull = XName.Get("DefaultNull");
XName XNAME_AllowNull = XName.Get("AllowNull");
XName XNAME_IsGenericWritable = XName.Get("IsGenericWritable");

XElement FindRootEntityByName(string name)
{
    if (name is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root?.Element(XNAME_Root)?.Elements(XNAME_Entity).Attributes(XNAME_Name).FirstOrDefault(a => a.Value == name);
    if (matchingAttribute is null)
        return null;
    return matchingAttribute.Parent;
}

XElement FindRootEnumByName(string name)
{
    if (name is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root?.Element(XNAME_Root)?.Elements(XNAME_EnumTypes).Elements().Attributes(XNAME_Name).FirstOrDefault(a => a.Value == name);
    if (matchingAttribute is null)
        return null;
    return matchingAttribute.Parent;
}

XElement FindRootByName(string name) { return (name is null) ? null : (FindRootEntityByName(name) ?? FindRootEnumByName(name)); }

XElement FindLocalEntityByName(string name)
{
    if (name is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root?.Element(XNAME_Local)?.Elements(XNAME_Entity).Attributes(XNAME_Name).FirstOrDefault(a => a.Value == name);
    if (matchingAttribute is null)
        return FindRootEntityByName(name);
    return matchingAttribute.Parent;
}

XElement FindLocalEnumByName(string name)
{
    if (name is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root?.Element(XNAME_Local)?.Elements(XNAME_EnumTypes).Elements().Attributes(XNAME_Name).FirstOrDefault(a => a.Value == name);
    if (matchingAttribute is null)
        return FindRootEnumByName(name);
    return matchingAttribute.Parent;
}

XElement FindLocalByName(string name) { return (name is null) ? null : (FindLocalEntityByName(name) ?? FindLocalEnumByName(name)); }

XElement FindUpstreamEntityByName(string name)
{
    if (name is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root?.Element(XNAME_Upstream)?.Elements(XNAME_Entity).Attributes(XNAME_Name).FirstOrDefault(a => a.Value == name);
    if (matchingAttribute is null)
        return FindRootEntityByName(name);
    return matchingAttribute.Parent;
}

XElement FindUpstreamEnumByName(string name)
{
    if (name is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root?.Element(XNAME_Upstream)?.Elements(XNAME_EnumTypes).Elements().Attributes(XNAME_Name).FirstOrDefault(a => a.Value == name);
    if (matchingAttribute is null)
        return FindRootEnumByName(name);
    return matchingAttribute.Parent;
}

XElement FindUpstreamByName(string name) { return (name is null) ? null : (FindUpstreamEntityByName(name) ?? FindUpstreamEnumByName(name)); }

XElement FindRootPropertyByFullName(string fullName)
{
    if (fullName is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root.Element(XNAME_Root).Elements(XNAME_Entity).Elements(XNAME_Properties).Elements().Attributes(XNAME_FullName)
        .FirstOrDefault(a => a.Value == fullName);
    if (matchingAttribute is null)
        return null;
    return matchingAttribute.Parent;
}

XElement FindRootFieldByFullName(string fullName)
{
    if (fullName is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root.Element(XNAME_Root).Elements(XNAME_EnumTypes).Elements().Elements(XNAME_Field).Attributes(XNAME_FullName)
        .FirstOrDefault(a => a.Value == fullName);
    if (matchingAttribute is null)
        return null;
    return matchingAttribute.Parent;
}

XElement FindRootMemberByFullName(string fullName) { return (fullName is null) ? null : (FindRootPropertyByFullName(fullName) ?? FindRootFieldByFullName(fullName)); }

XElement FindLocalPropertyByFullName(string fullName)
{
    if (fullName is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root.Element(XNAME_Local).Elements(XNAME_Entity).Elements(XNAME_Properties).Elements().Attributes(XNAME_FullName)
        .FirstOrDefault(a => a.Value == fullName);
    if (matchingAttribute is null)
        return FindRootPropertyByFullName(fullName);
    return matchingAttribute.Parent;
}

XElement FindLocalFieldByFullName(string fullName)
{
    if (fullName is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root.Element(XNAME_Local).Elements(XNAME_EnumTypes).Elements().Elements(XNAME_Field).Attributes(XNAME_FullName)
        .FirstOrDefault(a => a.Value == fullName);
    if (matchingAttribute is null)
        return FindRootFieldByFullName(fullName);
    return matchingAttribute.Parent;
}

XElement FindLocalMemberByFullName(string fullName) { return (fullName is null) ? null : (FindLocalPropertyByFullName(fullName) ?? FindLocalFieldByFullName(fullName)); }

XElement FindUpstreamPropertyByFullName(string fullName)
{
    if (fullName is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root.Element(XNAME_Upstream).Elements(XNAME_Entity).Elements(XNAME_Properties).Elements().Attributes(XNAME_FullName)
        .FirstOrDefault(a => a.Value == fullName);
    if (matchingAttribute is null)
        return FindRootPropertyByFullName(fullName);
    return matchingAttribute.Parent;
}

XElement FindUpstreamFieldByFullName(string fullName)
{
    if (fullName is null)
        return null;
    XAttribute matchingAttribute = EntityDefinitionsDocument.Root.Element(XNAME_Upstream).Elements(XNAME_EnumTypes).Elements().Elements(XNAME_Field).Attributes(XNAME_FullName)
        .FirstOrDefault(a => a.Value == fullName);
    if (matchingAttribute is null)
        return FindRootFieldByFullName(fullName);
    return matchingAttribute.Parent;
}

XElement FindUpstreamMemberByFullName(string fullName) { return (fullName is null) ? null : (FindUpstreamPropertyByFullName(fullName) ?? FindUpstreamFieldByFullName(fullName)); }

XElement GetEnumPropertyEnumType(XElement enumPropertyElement)
{
    XElement parent = enumPropertyElement?.Parent;
    if (parent is null || enumPropertyElement.Name != XNAME_Enum)
        return null;
    switch (parent.Name.LocalName)
    {
        case "Root":
            return FindRootEnumByName(enumPropertyElement.Attribute(XNAME_Name)?.Value);
        case "Local":
            return FindLocalEnumByName(enumPropertyElement.Attribute(XNAME_Name)?.Value);
        case "Upstream":
            return FindUpstreamEnumByName(enumPropertyElement.Attribute(XNAME_Name)?.Value);
        default:
            return null;
    }
}

XElement GetEnumPropertyDefaultField(XElement enumPropertyElement)
{
    XElement parent = enumPropertyElement?.Parent;
    if (parent is null || enumPropertyElement.Name != XNAME_Enum)
        return null;
    switch (parent.Name.LocalName)
    {
        case "Root":
            return FindRootFieldByFullName(enumPropertyElement.Element(XNAME_Default)?.Value);
        case "Local":
            return FindLocalFieldByFullName(enumPropertyElement.Element(XNAME_Default)?.Value);
        case "Upstream":
            return FindUpstreamFieldByFullName(enumPropertyElement.Element(XNAME_Default)?.Value);
        default:
            return null;
    }
}

XElement GetEnumFieldAmbientEnumField(XElement enumFieldElement)
{
    XElement parent = enumFieldElement?.Parent;
    if (parent is null || enumFieldElement.Name != XNAME_Enum)
        return null;
    switch (parent.Name.LocalName)
    {
        case "Root":
            return FindRootFieldByFullName(enumFieldElement.Elements(XNAME_AmbientEnum).Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault());
        case "Local":
            return FindLocalFieldByFullName(enumFieldElement.Elements(XNAME_AmbientEnum).Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault());
        case "Upstream":
            return FindUpstreamFieldByFullName(enumFieldElement.Elements(XNAME_AmbientEnum).Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault());
        default:
            return null;
    }
}

XElement GetRelatedEntityReferenceEntity(XElement relatedEntityPropertyElement)
{
    XElement parent = relatedEntityPropertyElement?.Parent;
    if (parent is null || (relatedEntityPropertyElement.Name != XNAME_RelatedEntity && relatedEntityPropertyElement.Name != XNAME_NewRelatedEntity))
        return null;
    switch (parent.Name.LocalName)
    {
        case "Root":
            return FindRootEntityByName(relatedEntityPropertyElement.Attribute(XNAME_Reference)?.Value);
        case "Local":
            return FindLocalEntityByName(relatedEntityPropertyElement.Attribute(XNAME_Reference)?.Value);
        case "Upstream":
            return FindUpstreamEntityByName(relatedEntityPropertyElement.Attribute(XNAME_Reference)?.Value);
        default:
            return null;
    }
}

XElement GetCollectionNavigationItemEntity(XElement collectionNavigationPropertyElement)
{
    XElement parent = collectionNavigationPropertyElement?.Parent;
    if (parent is null || (collectionNavigationPropertyElement.Name != XNAME_CollectionNavigation && collectionNavigationPropertyElement.Name != XNAME_NewCollectionNavigation))
        return null;
    switch (parent.Name.LocalName)
    {
        case "Root":
            return FindRootEntityByName(collectionNavigationPropertyElement.Attribute(XNAME_ItemType)?.Value);
        case "Local":
            return FindLocalEntityByName(collectionNavigationPropertyElement.Attribute(XNAME_ItemType)?.Value);
        case "Upstream":
            return FindUpstreamEntityByName(collectionNavigationPropertyElement.Attribute(XNAME_ItemType)?.Value);
        default:
            return null;
    }
}

IEnumerable<XElement> GetBaseEntities(XElement entityElement)
{
    XElement parent = entityElement?.Parent;
    if (parent is null || entityElement?.Name != XNAME_Entity)
        return Array.Empty<XElement>();

    IEnumerable<string> names = entityElement.Elements().Select(e => (
        IsType: e.Name == XNAME_ExtendsEntity || e.Name == XNAME_ImplementsEntity,
        IsDef: e.Name == XNAME_ExtendsGenericEntity || e.Name == XNAME_ImplementsGenericEntity,
        Element: e
    )).Where(t => t.IsType || t.IsDef).SelectMany(t => t.Element.Attributes(t.IsType ? XNAME_Type : XNAME_TypeDef)).Select(a => a.Value);
    switch (parent.Name.LocalName)
    {
        case "Root":
            return names.Distinct().Select(n => FindRootEntityByName(n)).Where(e => e is not null);
        case "Local":
            return entityElement.Attributes(XNAME_RootInterface).Select(a => a.Value).Concat(names).Distinct()
                .Select(n => FindLocalEntityByName(n)).Where(e => e is not null);
        case "Upstream":
            return entityElement.Attributes(XNAME_RootInterface).Select(a => a.Value).Concat(names).Distinct()
                .Select(n => FindUpstreamEntityByName(n)).Where(e => e is not null);
        default:
            return Array.Empty<XElement>();
    }
}

void GetAllBaseEntities(XElement entityElement, int level, Collection<(XElement Element, int Level)> collection, Func<IEnumerable<string>, IEnumerable<XElement>> getEntities)
{
    IEnumerable<string> names = entityElement.Elements().Select(e => (
        IsType: e.Name == XNAME_ExtendsEntity || e.Name == XNAME_ImplementsEntity,
        IsDef: e.Name == XNAME_ExtendsGenericEntity || e.Name == XNAME_ImplementsGenericEntity,
        Element: e
    )).Where(t => t.IsType || t.IsDef).SelectMany(t => t.Element.Attributes(t.IsType ? XNAME_Type : XNAME_TypeDef)).Select(a => a.Value);
    int nextLevel = level + 1;
    foreach (XElement baseEntity in getEntities(names))
    {
        if (!collection.Any(e => e.Level == level && ReferenceEquals(e.Element, baseEntity)))
        {
            collection.Add(new(baseEntity, level));
            GetAllBaseEntities(baseEntity, nextLevel, collection, getEntities);
        }
    }
}

XElement[] GetAllBaseEntities(XElement entityElement)
{
    XElement parent = entityElement?.Parent;
    if (parent is null || entityElement?.Name != XNAME_Entity)
        return Array.Empty<XElement>();
    Collection<(XElement Element, int Level)> result = new();
    Func<IEnumerable<string>, IEnumerable<XElement>> getEntities;
    switch (parent.Name.LocalName)
    {
        case "Root":
            getEntities = names => names.Distinct().Select(n => FindRootEntityByName(n)).Where(e => e is not null);
            break;
        case "Local":
            getEntities = names => entityElement.Attributes(XNAME_RootInterface).Select(a => a.Value).Concat(names).Distinct()
                .Select(n => FindLocalEntityByName(n)).Where(e => e is not null);
            break;
        case "Upstream":
            getEntities = names => entityElement.Attributes(XNAME_RootInterface).Select(a => a.Value).Concat(names).Distinct()
                .Select(n => FindUpstreamEntityByName(n)).Where(e => e is not null);
            break;
        default:
            return Array.Empty<XElement>();
    }
    GetAllBaseEntities(entityElement, 0, result, getEntities);
    return result.OrderBy(t => t.Level).Select(t => t.Element).ToArray();
}

IEnumerable<string> GetBaseTypeNames(XElement entityElement)
{
    XElement parent = entityElement?.Parent;
    if (parent is null || entityElement?.Name != XNAME_Entity)
        return Enumerable.Empty<string>();

    IEnumerable<string> names = entityElement.Elements().Where(e => e.Name == XNAME_ExtendsEntity || e.Name == XNAME_ImplementsEntity ||
        e.Name == XNAME_ExtendsGenericEntity || e.Name == XNAME_ImplementsGenericEntity).Attributes(XNAME_Type).Select(a => a.Value);
    switch (parent.Name.LocalName)
    {
        case "Root":
            names = names.Distinct();
            break;
        case "Local":
            names = entityElement.Attributes(XNAME_RootInterface).Select(a => a.Value).Concat(names).Distinct();
            break;
        case "Upstream":
            names = entityElement.Attributes(XNAME_RootInterface).Select(a => a.Value).Concat(names).Distinct();
            break;
        default:
            return Enumerable.Empty<string>();
    }
    return names.Select(n => n.Replace("{", "<").Replace("}", ">"));
}

XElement GetRelatedEntityPrimaryKeyProperty(XElement relatedEntityPropertyElement)
{
    XElement parent = relatedEntityPropertyElement?.Parent;
    if (parent is null || (relatedEntityPropertyElement.Name != XNAME_RelatedEntity && relatedEntityPropertyElement.Name != XNAME_NewRelatedEntity))
        return null;
    switch (parent.Name.LocalName)
    {
        case "Root":
            return FindRootPropertyByFullName(relatedEntityPropertyElement.Attribute(XNAME_PrimaryKey)?.Value);
        case "Local":
            return FindLocalPropertyByFullName(relatedEntityPropertyElement.Attribute(XNAME_PrimaryKey)?.Value);
        case "Upstream":
            return FindUpstreamPropertyByFullName(relatedEntityPropertyElement.Attribute(XNAME_PrimaryKey)?.Value);
        default:
            return null;
    }
}

XElement GetCollectionNavigationForeignKeyProperty(XElement collectionNavigationPropertyElement)
{
    XElement parent = collectionNavigationPropertyElement?.Parent;
    if (parent is null || (collectionNavigationPropertyElement.Name != XNAME_CollectionNavigation && collectionNavigationPropertyElement.Name != XNAME_NewCollectionNavigation))
        return null;
    switch (parent.Name.LocalName)
    {
        case "Root":
            return FindRootPropertyByFullName(collectionNavigationPropertyElement.Attribute(XNAME_ForeignKey)?.Value);
        case "Local":
            return FindLocalPropertyByFullName(collectionNavigationPropertyElement.Attribute(XNAME_ForeignKey)?.Value);
        case "Upstream":
            return FindUpstreamPropertyByFullName(collectionNavigationPropertyElement.Attribute(XNAME_ForeignKey)?.Value);
        default:
            return null;
    }
}

bool GenerateEnumTypes(IEnumerable<XElement> enumElements)
{
    if (!enumElements.Any())
        return false;
    GenerateEnumType(enumElements.First());
    foreach (XElement typeElement in enumElements.Skip(1))
    {
        WriteLine("");
        GenerateEnumType(typeElement);
    }
    return true;
}


void WriteAmbientValueAttribute(XElement memberElement)
{
    string ambientValue = memberElement.Elements("AmbientString").Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
    if (ambientValue is not null)
    {
        Write("[AmbientValue(\"");
        Write(ambientValue.Replace("\\", "\\\\").Replace("\"", "\\\"").Replace("\r", "\\r").Replace("\n", "\\n"));
        WriteLine("\")]");
        return;
    }
    foreach (XName name in new[] { XNAME_AmbientEnum, XNAME_AmbientBoolean, XNAME_AmbientInt })
    {
        ambientValue = memberElement.Elements(name).Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
        if (!string.IsNullOrWhiteSpace(ambientValue))
        {
            Write("[AmbientValue(");
            Write(ambientValue);
            WriteLine(")]");
            return;
        }
    }
    ambientValue = memberElement.Elements("AmbientUInt").Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine("u)]");
        return;
    }
    ambientValue = memberElement.Elements("AmbientLong").Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine("L)]");
        return;
    }
    ambientValue = memberElement.Elements("AmbientULong").Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine("UL)]");
        return;
    }
    ambientValue = memberElement.Elements(XNAME_AmbientDouble).Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine(ambientValue.Contains(".") ? ")]" : ".0)]");
        return;
    }
    ambientValue = memberElement.Elements(XNAME_AmbientFloat).Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
    if (!string.IsNullOrWhiteSpace(ambientValue))
    {
        Write("[AmbientValue(");
        Write(ambientValue);
        WriteLine("f)]");
        return;
    }
    foreach (XName name in new[] { XNAME_AmbientByte, XNAME_AmbientSByte, XNAME_AmbientShort, XNAME_AmbientUShort })
    {
        ambientValue = memberElement.Elements(name).Attributes(XNAME_Value).Select(a => a.Value).FirstOrDefault();
        if (!string.IsNullOrWhiteSpace(ambientValue))
        {
            Write("[AmbientValue((");
            Write(name.LocalName.Substring(7).ToLower());
            Write(")");
            Write(ambientValue);
            WriteLine(")]");
            return;
        }
    }
}

string WriteDisplayAttribute(XElement memberElement, string typeName = null)
{
    string memberName = memberElement.Attribute(XNAME_Name)?.Value;
    string displayNameResource = memberElement.Attributes("DisplayNameResource").Select(a => a.Value).DefaultIfEmpty(string.IsNullOrWhiteSpace(typeName) ? $"DisplayName_{memberName}" : $"DisplayName_{typeName}_{memberName}").First();
    string descriptionResource = memberElement.Attributes("DescriptionResource").Select(a => a.Value).FirstOrDefault();
    string resourceType = memberElement.Attributes("ResourceType").Select(a => a.Value).DefaultIfEmpty("Properties.Resources").First();
    if (string.IsNullOrWhiteSpace(displayNameResource))
    {
        if (!string.IsNullOrWhiteSpace(descriptionResource))
        {
            Write("[Display(Description = nameof(");
            Write(resourceType);
            Write(".");
            Write(descriptionResource);
            WriteLine("), ResourceType = typeof(Properties.Resources))]");
        }
    }
    else
    {
        Write("[Display(Name = nameof(");
        Write(resourceType);
        Write(".");
        Write(displayNameResource);
        if (!string.IsNullOrWhiteSpace(descriptionResource))
        {
            Write("), Description = nameof(");
            Write(resourceType);
            Write(".");
            Write(descriptionResource);
        }
        Write("), ResourceType = typeof(");
        Write(resourceType);
        WriteLine("))]");
    }
    return memberName;
}

void GenerateEnumType(XElement enumElement)
{
    GenerateXmlDoc(enumElement.Element(XNAME_summary));
    GenerateXmlDoc(enumElement.Element(XNAME_remarks));
    foreach (XElement e in enumElement.Elements(XNAME_seealso))
    {
        if (!e.IsEmpty && e.Value.Trim().Length == 0)
            e.RemoveAll();
        GenerateXmlDoc(e);
    }
    if (enumElement.Attributes(XNAME_IsFlags).Any(a => a.Value == "true"))
        WriteLine("[Flags]");
    Write("public enum ");
    string typeName = enumElement.Attribute(XNAME_Name)?.Value;
    Write(typeName);
    Write(" : ");
    WriteLine(enumElement.Name.LocalName.ToLower());
    WriteLine("{");
    PushIndent("    ");
    bool isSubsequentMember = false;
    foreach (XElement fieldElement in enumElement.Elements(XNAME_Field))
    {
        if (isSubsequentMember)
        {
            WriteLine(",");
            WriteLine("");
            isSubsequentMember = true;
        }
        else
            isSubsequentMember = true;
        GenerateXmlDoc(fieldElement.Element(XNAME_summary));
        GenerateXmlDoc(fieldElement.Element(XNAME_remarks));
        foreach (XElement e in fieldElement.Elements(XNAME_seealso))
        {
            if (!e.IsEmpty && e.Value.Trim().Length == 0)
                e.RemoveAll();
            GenerateXmlDoc(e);
        }
        WriteAmbientValueAttribute(fieldElement);
        string fieldName = WriteDisplayAttribute(fieldElement, typeName);
        Write(fieldName);
        Write(" = ");
        Write(fieldElement.Attribute(XNAME_Value)?.Value);
    }

    PopIndent();
    WriteLine("");
    WriteLine("}");
}

void GenerateEntityTypes(IEnumerable<XElement> entityElements, bool isSubsequentMember)
{
    if (isSubsequentMember)
        WriteLine("");
    GenerateEntityInterface(entityElements.First());
    foreach (XElement typeElement in entityElements.Skip(1))
    {
        WriteLine("");
        GenerateEntityInterface(typeElement);
    }
}

void GenerateEntityInterface(XElement entityElement)
{
    GenerateXmlDoc(entityElement.Element(XNAME_summary));
    foreach (XElement e in entityElement.Elements(XNAME_typeparam))
        GenerateXmlDoc(e);
    GenerateXmlDoc(entityElement.Element(XNAME_remarks));

    string[] baseTypeNames = GetBaseTypeNames(entityElement).ToArray();
    foreach (XElement e in entityElement.Elements(XNAME_seealso).Concat(baseTypeNames.Select(s => new XElement(XNAME_seealso, new XAttribute(XNAME_cref, s)))))
    {
        if (!e.IsEmpty && e.Value.Trim().Length == 0)
            e.RemoveAll();
        GenerateXmlDoc(e);
    }
    string typeName = entityElement.Attribute(XNAME_Name)?.Value.Replace("{", "<").Replace("}", ">");
    Write("public interface ");
    if (baseTypeNames.Length > 0)
    {
        Write(typeName);
        Write(" : ");

        if (baseTypeNames.Skip(1).Any())
        {
            foreach (string t in baseTypeNames.Reverse().Skip(1).Reverse())
            {
                Write(t);
                Write(", ");
            }
        }
        WriteLine(baseTypeNames.Last());
    }
    else
        WriteLine(typeName);
    WriteLine("{");
    PushIndent("    ");
    bool isSubsequentMember = false;
    XElement[] baseEntities = GetAllBaseEntities(entityElement);
    foreach (XElement propertyElement in entityElement.Elements(XNAME_Properties).Elements())
    {
        if (propertyElement.Name.NamespaceName.Length > 0)
            continue;
        if (isSubsequentMember)
            WriteLine("");
        else
            isSubsequentMember = true;
        XElement inheritedProperty = GetInheritedProperty(propertyElement, baseEntities, out XElement commentDocElement, out bool isNew);
        XElement definitionPropertyElement = propertyElement;

        GenerateXmlDoc(commentDocElement.Element(XNAME_summary));
        GenerateXmlDoc(commentDocElement.Element(XNAME_value));
        GenerateXmlDoc(commentDocElement.Element(XNAME_remarks));
        foreach (XElement e in commentDocElement.Elements(XNAME_seealso))
        {
            if (!e.IsEmpty && e.Value.Trim().Length == 0)
                e.RemoveAll();
            GenerateXmlDoc(e);
        }
        string propertyName = WriteDisplayAttribute(definitionPropertyElement);
        bool allowsNull = definitionPropertyElement.Elements(XNAME_AllowNull).Any() || propertyElement.Elements(XNAME_DefaultNull).Any();
        if (isNew)
            Write("new ");
        switch (propertyElement.Name.LocalName)
        {
            case "Byte":
            case "SByte":
            case "Short":
            case "UShort":
            case "Int":
            case "UInt":
            case "Long":
            case "ULong":
            case "Float":
            case "Double":
                Write(propertyElement.Name.LocalName.ToLower());
                Write(allowsNull ? "? " : " ");
                break;
            case "ByteArray":
                Write("byte[] ");
                break;
            case "Text":
            case "NVarChar":
                Write("string ");
                break;
            case "VolumeIdentifier":
            case "DriveType":
            case "MD5Hash":
            case "DateTime":
                Write(propertyElement.Name.LocalName);
                Write(allowsNull ? "? " : " ");
                break;
            case "ByteValues":
            case "MultiStringValue":
                Write(propertyElement.Name.LocalName);
                Write(" ");
                break;
            case "UniqueIdentifier":
                Write(allowsNull ? "Guid? " : "Guid ");
                break;
            case "Bit":
                Write(allowsNull ? "bool? " : "bool ");
                break;
            case "Enum":
                Write(propertyElement.Attribute(XNAME_Type)?.Value);
                Write(allowsNull ? "? " : " ");
                break;
            case "CollectionNavigation":
                Write("IEnumerable<");
                Write(propertyElement.Attribute(XNAME_ItemType)?.Value);
                Write("> ");
                break;
            case "RelatedEntity":
                Write(propertyElement.Attribute(XNAME_TypeDef)?.Value ?? propertyElement.Attribute(XNAME_Reference)?.Value);
                Write(" ");
                break;
            default:
                Write("#warning Unknown element: ");
                WriteLine(propertyElement.Name.LocalName);
                Write("object ");
                break;
        }

        Write(propertyName);
        WriteLine(propertyElement.Attributes(XNAME_IsGenericWritable).Any(a => a.Value == "true") ? " { get; set; }" : " { get; }");
    }

    PopIndent();
    WriteLine("}");
}

XElement GetInheritedProperty(XElement propertyElement, XElement[] baseEntities, out XElement commentDocElement, out bool isNew)
{
    IEnumerable<XElement> baseProperties;
    XName inheritedName;
    switch (propertyElement.Name.LocalName)
    {
        case "NewIdNavRef":
            isNew = false;
            inheritedName = XNAME_UniqueIdentifier;
            baseProperties = baseEntities.Elements(XNAME_Properties).Elements().Where(e => e.Name == XNAME_NewIdNavRef || e.Name == inheritedName);
            break;
        case "NewRelatedEntity":
            isNew = true;
            inheritedName = XNAME_UniqueIdentifier;
            baseProperties = baseEntities.Elements(XNAME_Properties).Elements().Where(e => e.Name == XNAME_NewRelatedEntity || e.Name == inheritedName);
            break;
        case "NewCollectionNavigation":
            isNew = true;
            inheritedName = XNAME_CollectionNavigation;
            baseProperties = baseEntities.Elements(XNAME_Properties).Elements().Where(e => e.Name == XNAME_NewCollectionNavigation || e.Name == inheritedName);
            break;
        default:
            isNew = false;
            commentDocElement = propertyElement;
            return propertyElement;
    }
    string name = propertyElement.Attribute(XNAME_Name)?.Value;
    commentDocElement = propertyElement.Elements(XNAME_summary).Any() ? propertyElement :
        baseProperties.Attributes(XNAME_Name).Where(a => a.Value == name).Select(a => a.Parent).Where(e => e.Elements(XNAME_summary).Any())
            .DefaultIfEmpty(propertyElement).First();
    return baseProperties.Where(e => e.Name == inheritedName).DefaultIfEmpty(propertyElement).First();
}

Regex LeadingEmptyLine = new Regex(@"^([^\r\n\S]+)?(\r\n?|\n)", RegexOptions.Compiled);
Regex TrailingEmptyLine = new Regex(@"(\r\n?|\n)([^\r\n\S]+)?$", RegexOptions.Compiled);
Regex TrailingWsRegex = new Regex(@"\s+$", RegexOptions.Compiled);

void GenerateXmlDoc(XElement xmlDocElement)
{
    if (xmlDocElement is null)
        return;
    if (xmlDocElement.IsEmpty)
    {
        foreach (string lt in NewLineRegex.Split(xmlDocElement.ToString(SaveOptions.None)))
        {
            Write("/// ");
            WriteLine(lt.Trim());
        }
        return;
    }
    if (xmlDocElement.LastNode is XText lastNode)
    {
        while (lastNode.PreviousNode is XText previousTextNode)
        {
            lastNode.Value = $"{previousTextNode.Value}{lastNode.Value}";
            previousTextNode.Remove();
        }
        if (!TrailingEmptyLine.IsMatch(lastNode.Value))
            lastNode.Value = $"{lastNode.Value}\n";
    }
    else
    {
        lastNode = new XText("\n");
        xmlDocElement.Add(lastNode);
    }
    if (xmlDocElement.FirstNode is XText firstNode)
    {
        while (firstNode.NextNode is XText followingTextNode)
        {
            firstNode.Value = $"{firstNode.Value}{followingTextNode.Value}";
            followingTextNode.Remove();
        }
        if (ReferenceEquals(firstNode, lastNode))
        {
            if (LeadingEmptyLine.Match(firstNode.Value).Length < firstNode.Value.Length)
                firstNode.Value = $"\n{firstNode.Value}";
        }
        else if (!LeadingEmptyLine.IsMatch(firstNode.Value))
            firstNode.Value = $"\n{firstNode.Value}";
    }
    else
        xmlDocElement.FirstNode.AddBeforeSelf(new XText("\n"));
    IEnumerable<string> lines = NewLineRegex.Split(xmlDocElement.ToString(SaveOptions.None));
    if (!(lines.Skip(2).Any() && (lines = lines.Take(1).Concat(lines.Skip(1).SkipWhile(s => string.IsNullOrWhiteSpace(s))).ToArray()).Skip(3).Any() &&
        (lines = lines.Reverse().Take(1).Concat(lines.Reverse().Skip(1).SkipWhile(s => string.IsNullOrWhiteSpace(s))).Reverse().ToArray()).Skip(3).Any()))
    {
        Write("/// ");
        Write(lines.First());
        if (lines.Skip(2).Any())
            Write(lines.Skip(1).First().Trim());
        WriteLine(lines.Last().Trim());
        return;
    }
    
    if (LeadingWsRegex.IsMatch(lines.Skip(1).First()))
    {
        int indent = lines.Skip(1).Reverse().Skip(1).Reverse().Select(s => LeadingWsRegex.Match(s)).Select(m => m.Success ? m.Length : 0).Min();
        if (indent > 0)
            lines = lines.Take(1).Concat(lines.Skip(1).Reverse().Skip(1).Reverse().Select(s => s.Substring(indent))).Concat(lines.Reverse().Take(1));
    }
    else
    {
        int indent = lines.Skip(2).Reverse().Skip(1).Reverse().Select(s => LeadingWsRegex.Match(s)).Select(m => m.Success ? m.Length : 0).Min();
        if (indent > 0)
            lines = lines.Take(2).Concat(lines.Skip(2).Reverse().Skip(1).Reverse().Select(s => s.Substring(indent))).Concat(lines.Reverse().Take(1));
    }

    Write("/// ");
    WriteLine(lines.First());
    foreach (string s in lines.Skip(1).Reverse().Skip(1).Reverse())
    {
        Write("/// ");
        WriteLine(s.TrimEnd());
    }
    Write("/// ");
    WriteLine(lines.Last().Trim());
}
#>
