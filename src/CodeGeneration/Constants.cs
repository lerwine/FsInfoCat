using System;
using System.Text.RegularExpressions;
using System.Xml.Linq;

namespace CodeGeneration
{
    public static class Constants
    {
        #region Sqlite Code Constants

        public const string SQL_TYPENAME_BLOB = "BLOB";
        public const string SQL_TYPENAME_UNIQUEIDENTIFIER = "UNIQUEIDENTIFIER";
        public const string SQL_TYPENAME_NVARCHAR = "NVARCHAR";
        public const string SQL_TYPENAME_CHARACTER = "CHARACTER";
        public const string SQL_TYPENAME_TEXT = "TEXT";
        public const string SQL_TYPENAME_DATETIME = "DATETIME";
        public const string SQL_TYPENAME_TIME = "TIME";
        public const string SQL_TYPENAME_BIT = "BIT";
        public const string SQL_TYPENAME_VARBINARY = "VARBINARY";
        public const string SQL_TYPENAME_BINARY = "BINARY";
        public const string SQL_TYPENAME_TINYINT = "TINYINT";
        public const string SQL_TYPENAME_UNSIGNED_TINYINT = "UNSIGNED TINYINT";
        public const string SQL_TYPENAME_SMALLINT = "SMALLINT";
        public const string SQL_TYPENAME_UNSIGNED_SMALLINT = "UNSIGNED SMALLINT";
        public const string SQL_TYPENAME_INT = "INT";
        public const string SQL_TYPENAME_UNSIGNED_INT = "UNSIGNED INT";
        public const string SQL_TYPENAME_BIGINT = "BIGINT";
        public const string SQL_TYPENAME_UNSIGNED_BIGINT = "UNSIGNED BIGINT";
        public const string SQL_TYPENAME_REAL = "REAL";
        public const string SQL_TYPENAME_NUMERIC = "NUMERIC";

        #endregion

        #region XML Name Constants

        public const string NAME_Root = "Root";
        public const string NAME_Upstream = "Upstream";
        public const string NAME_Local = "Local";
        public const string NAME_Entity = "Entity";
        public const string NAME_Enum = "Enum";
        public const string NAME_Name = "Name";
        public const string NAME_FullName = "FullName";
        public const string NAME_Field = "Field";
        public const string NAME_CollectionNavigation = "CollectionNavigation";
        public const string NAME_NewCollectionNavigation = "NewCollectionNavigation";
        public const string NAME_RelatedEntity = "RelatedEntity";
        public const string NAME_NewRelatedEntity = "NewRelatedEntity";
        public const string NAME_NewRelatedEntityKey = "NewRelatedEntityKey";
        public const string NAME_ItemType = "ItemType";
        public const string NAME_Reference = "Reference";
        public const string NAME_AmbientEnum = "AmbientEnum";
        public const string NAME_Default = "Default";
        public const string NAME_Value = "Value";
        public const string NAME_EnumTypes = "EnumTypes";
        public const string NAME_Properties = "Properties";
        public const string NAME_BaseType = "BaseType";
        public const string NAME_ExtendsEntity = "ExtendsEntity";
        public const string NAME_ExtendsGenericEntity = "ExtendsGenericEntity";
        public const string NAME_Implements = "Implements";
        public const string NAME_ImplementsEntity = "ImplementsEntity";
        public const string NAME_ImplementsGenericEntity = "ImplementsGenericEntity";
        public const string NAME_RootInterface = "RootInterface";
        public const string NAME_Type = "Type";
        public const string NAME_TypeDef = "TypeDef";
        public const string NAME_ItemKey = "ItemKey";
        public const string NAME_AmbientBoolean = "AmbientBoolean";
        public const string NAME_AmbientInt = "AmbientInt";
        public const string NAME_AmbientByte = "AmbientByte";
        public const string NAME_AmbientSByte = "AmbientSByte";
        public const string NAME_AmbientShort = "AmbientShort";
        public const string NAME_AmbientUShort = "AmbientUShort";
        public const string NAME_AmbientFloat = "AmbientFloat";
        public const string NAME_AmbientDouble = "AmbientDouble";
        public const string NAME_summary = "summary";
        public const string NAME_remarks = "remarks";
        public const string NAME_seealso = "seealso";
        public const string NAME_IsFlags = "IsFlags";
        public const string NAME_typeparam = "typeparam";
        public const string NAME_cref = "cref";
        public const string NAME_NewIdNavRef = "NewIdNavRef";
        public const string NAME_UniqueIdentifier = "UniqueIdentifier";
        public const string NAME_value = "value";
        public const string NAME_DefaultNull = "DefaultNull";
        public const string NAME_DefaultNow = "DefaultNow";
        public const string NAME_DefaultZero = "DefaultZero";
        public const string NAME_DefaultEmpty = "DefaultEmpty";
        public const string NAME_AllowNull = "AllowNull";
        public const string NAME_IsGenericWritable = "IsGenericWritable";
        public const string NAME_DisplayNameResource = "DisplayNameResource";
        public const string NAME_DescriptionResource = "DescriptionResource";
        public const string NAME_ResourceType = "ResourceType";
        public const string NAME_TableName = "TableName";
        public const string NAME_ColName = "ColName";
        public const string NAME_Byte = "Byte";
        public const string NAME_SByte = "SByte";
        public const string NAME_MultiStringValue = "MultiStringValue";
        public const string NAME_MD5Hash = "MD5Hash";
        public const string NAME_ByteValues = "ByteValues";
        public const string NAME_Short = "Short";
        public const string NAME_UShort = "UShort";
        public const string NAME_Int = "Int";
        public const string NAME_UInt = "UInt";
        public const string NAME_Long = "Long";
        public const string NAME_ULong = "ULong";
        public const string NAME_Double = "Double";
        public const string NAME_Float = "Float";
        public const string NAME_Decimal = "Decimal";
        public const string NAME_NVarChar = "NVarChar";
        public const string NAME_Char = "Char";
        public const string NAME_DateTime = "DateTime";
        public const string NAME_TimeSpan = "TimeSpan";
        public const string NAME_Bit = "Bit";
        public const string NAME_Text = "Text";
        public const string NAME_VolumeIdentifier = "VolumeIdentifier";
        public const string NAME_DriveType = "DriveType";
        public const string NAME_MaxLength = "MaxLength";
        public const string NAME_MinLength = "MinLength";
        public const string NAME_MaxValue = "MaxValue";
        public const string NAME_MinValue = "MinValue";
        public const string NAME_CreatedOn = "CreatedOn";
        public const string NAME_ModifiedOn = "ModifiedOn";
        public const string NAME_UpstreamId = "UpstreamId";
        public const string NAME_LastSynchronizedOn = "LastSynchronizedOn";
        public const string NAME_IsNormalized = "IsNormalized";
        public const string NAME_Index = "Index";
        public const string NAME_Unique = "Unique";
        public const string NAME_IsPrimaryKey = "IsPrimaryKey";
        public const string NAME_Property = "Property";
        public const string NAME_LeftProperty = "LeftProperty";
        public const string NAME_RightProperty = "RightProperty";
        public const string NAME_Operator = "Operator";
        public const string XNAME_langword = "langword";
        public const string XNAME_see = "see";
        public const string NAME_PrimaryKey = "PrimaryKey";
        public const string NAME_ForeignKey = "ForeignKey";
        public const string NAME_AmbientString = "AmbientString";
        public const string NAME_AmbientUInt = "AmbientUInt";
        public const string NAME_AmbientLong = "AmbientLong";
        public const string NAME_AmbientULong = "AmbientULong";
        public const string NAME_IsCaseSensitive = "IsCaseSensitive";
        [Obsolete("Remove this")]
        public const string NAME_ConstraintName = "ConstraintName";
        public const string NAME_DbRelationship = "DbRelationship";
        public const string NAME_FkPropertyName = "FkPropertyName";
        public const string NAME_Check = "Check";
        public const string NAME_And = "And";
        public const string NAME_Or = "Or";
        public const string NAME_IsNull = "IsNull";
        public const string NAME_NotNull = "NotNull";
        public const string NAME_LessThan = "LessThan";
        public const string NAME_NotGreaterThan = "NotGreaterThan";
        public const string NAME_Equals = "Equals";
        public const string NAME_NotEquals = "NotEquals";
        public const string NAME_NotLessThan = "NotLessThan";
        public const string NAME_GreaterThan = "GreaterThan";
        public const string NAME_OtherProperty = "OtherProperty";
        public const string NAME_True = "True";
        public const string NAME_False = "False";
        public const string NAME_Now = "Now";
        public const string NAME_Trimmed = "Trimmed";
        public const string NAME_Length = "Length";
        public const string NAME_Navigation = "Navigation";
        public const string NAME_IsOneToOne = "IsOneToOne";

        #endregion

        #region XML Name Fields

        public static readonly XName XNAME_Root = XName.Get(NAME_Root);
        public static readonly XName XNAME_Upstream = XName.Get(NAME_Upstream);
        public static readonly XName XNAME_Local = XName.Get(NAME_Local);
        public static readonly XName XNAME_Entity = XName.Get(NAME_Entity);
        public static readonly XName XNAME_Enum = XName.Get(NAME_Enum);
        public static readonly XName XNAME_Name = XName.Get(NAME_Name);
        public static readonly XName XNAME_FullName = XName.Get(NAME_FullName);
        public static readonly XName XNAME_Field = XName.Get(NAME_Field);
        public static readonly XName XNAME_CollectionNavigation = XName.Get(NAME_CollectionNavigation);
        public static readonly XName XNAME_NewCollectionNavigation = XName.Get(NAME_NewCollectionNavigation);
        public static readonly XName XNAME_RelatedEntity = XName.Get(NAME_RelatedEntity);
        public static readonly XName XNAME_NewRelatedEntity = XName.Get(NAME_NewRelatedEntity);
        public static readonly XName XNAME_NewRelatedEntityKey = XName.Get(NAME_NewRelatedEntityKey);
        public static readonly XName XNAME_ItemType = XName.Get(NAME_ItemType);
        public static readonly XName XNAME_Reference = XName.Get(NAME_Reference);
        public static readonly XName XNAME_AmbientEnum = XName.Get(NAME_AmbientEnum);
        public static readonly XName XNAME_Default = XName.Get(NAME_Default);
        public static readonly XName XNAME_Value = XName.Get(NAME_Value);
        public static readonly XName XNAME_EnumTypes = XName.Get(NAME_EnumTypes);
        public static readonly XName XNAME_Properties = XName.Get(NAME_Properties);
        public static readonly XName XNAME_BaseType = XName.Get(NAME_BaseType);
        public static readonly XName XNAME_ExtendsEntity = XName.Get(NAME_ExtendsEntity);
        public static readonly XName XNAME_ExtendsGenericEntity = XName.Get(NAME_ExtendsGenericEntity);
        public static readonly XName XNAME_Implements = XName.Get(NAME_Implements);
        public static readonly XName XNAME_ImplementsEntity = XName.Get(NAME_ImplementsEntity);
        public static readonly XName XNAME_ImplementsGenericEntity = XName.Get(NAME_ImplementsGenericEntity);
        public static readonly XName XNAME_RootInterface = XName.Get(NAME_RootInterface);
        public static readonly XName XNAME_Type = XName.Get(NAME_Type);
        public static readonly XName XNAME_TypeDef = XName.Get(NAME_TypeDef);
        public static readonly XName XNAME_ItemKey = XName.Get(NAME_ItemKey);
        public static readonly XName XNAME_AmbientBoolean = XName.Get(NAME_AmbientBoolean);
        public static readonly XName XNAME_AmbientInt = XName.Get(NAME_AmbientInt);
        public static readonly XName XNAME_AmbientByte = XName.Get(NAME_AmbientByte);
        public static readonly XName XNAME_AmbientSByte = XName.Get(NAME_AmbientSByte);
        public static readonly XName XNAME_AmbientShort = XName.Get(NAME_AmbientShort);
        public static readonly XName XNAME_AmbientUShort = XName.Get(NAME_AmbientUShort);
        public static readonly XName XNAME_AmbientFloat = XName.Get(NAME_AmbientFloat);
        public static readonly XName XNAME_AmbientDouble = XName.Get(NAME_AmbientDouble);
        public static readonly XName XNAME_summary = XName.Get(NAME_summary);
        public static readonly XName XNAME_remarks = XName.Get(NAME_remarks);
        public static readonly XName XNAME_seealso = XName.Get(NAME_seealso);
        public static readonly XName XNAME_IsFlags = XName.Get(NAME_IsFlags);
        public static readonly XName XNAME_typeparam = XName.Get(NAME_typeparam);
        public static readonly XName XNAME_cref = XName.Get(NAME_cref);
        public static readonly XName XNAME_NewIdNavRef = XName.Get(NAME_NewIdNavRef);
        public static readonly XName XNAME_UniqueIdentifier = XName.Get(NAME_UniqueIdentifier);
        public static readonly XName XNAME_value = XName.Get(NAME_value);
        public static readonly XName XNAME_DefaultNull = XName.Get(NAME_DefaultNull);
        public static readonly XName XNAME_DefaultNow = XName.Get(NAME_DefaultNow);
        public static readonly XName XNAME_DefaultZero = XName.Get(NAME_DefaultZero);
        public static readonly XName XNAME_AllowNull = XName.Get(NAME_AllowNull);
        public static readonly XName XNAME_IsGenericWritable = XName.Get(NAME_IsGenericWritable);
        public static readonly XName XNAME_DisplayNameResource = XName.Get(NAME_DisplayNameResource);
        public static readonly XName XNAME_DescriptionResource = XName.Get(NAME_DescriptionResource);
        public static readonly XName XNAME_ResourceType = XName.Get(NAME_ResourceType);
        public static readonly XName XNAME_TableName = XName.Get(NAME_TableName);
        public static readonly XName XNAME_ColName = XName.Get(NAME_ColName);
        public static readonly XName XNAME_Byte = XName.Get(NAME_Byte);
        public static readonly XName XNAME_SByte = XName.Get(NAME_SByte);
        public static readonly XName XNAME_MultiStringValue = XName.Get(NAME_MultiStringValue);
        public static readonly XName XNAME_MD5Hash = XName.Get(NAME_MD5Hash);
        public static readonly XName XNAME_ByteValues = XName.Get(NAME_ByteValues);
        public static readonly XName XNAME_Short = XName.Get(NAME_Short);
        public static readonly XName XNAME_UShort = XName.Get(NAME_UShort);
        public static readonly XName XNAME_Int = XName.Get(NAME_Int);
        public static readonly XName XNAME_UInt = XName.Get(NAME_UInt);
        public static readonly XName XNAME_Long = XName.Get(NAME_Long);
        public static readonly XName XNAME_ULong = XName.Get(NAME_ULong);
        public static readonly XName XNAME_Double = XName.Get(NAME_Double);
        public static readonly XName XNAME_Float = XName.Get(NAME_Float);
        public static readonly XName XNAME_Decimal = XName.Get(NAME_Decimal);
        public static readonly XName XNAME_NVarChar = XName.Get(NAME_NVarChar);
        public static readonly XName XNAME_Char = XName.Get(NAME_Char);
        public static readonly XName XNAME_DateTime = XName.Get(NAME_DateTime);
        public static readonly XName XNAME_TimeSpan = XName.Get(NAME_TimeSpan);
        public static readonly XName XNAME_Bit = XName.Get(NAME_Bit);
        public static readonly XName XNAME_Text = XName.Get(NAME_Text);
        public static readonly XName XNAME_VolumeIdentifier = XName.Get(NAME_VolumeIdentifier);
        public static readonly XName XNAME_DriveType = XName.Get(NAME_DriveType);
        public static readonly XName XNAME_MaxLength = XName.Get(NAME_MaxLength);
        public static readonly XName XNAME_CreatedOn = XName.Get(NAME_CreatedOn);
        public static readonly XName XNAME_ModifiedOn = XName.Get(NAME_ModifiedOn);
        public static readonly XName XNAME_UpstreamId = XName.Get(NAME_UpstreamId);
        public static readonly XName XNAME_LastSynchronizedOn = XName.Get(NAME_LastSynchronizedOn);
        public static readonly XName XNAME_IsNormalized = XName.Get(NAME_IsNormalized);
        public static readonly XName XNAME_MinLength = XName.Get(NAME_MinLength);
        public static readonly XName XNAME_MaxValue = XName.Get(NAME_MaxValue);
        public static readonly XName XNAME_MinValue = XName.Get(NAME_MinValue);
        public static readonly XName XNAME_Index = XName.Get(NAME_Index);
        public static readonly XName XNAME_DefaultEmpty = XName.Get(NAME_DefaultEmpty);
        public static readonly XName XNAME_Unique = XName.Get(NAME_Unique);
        public static readonly XName XNAME_IsPrimaryKey = XName.Get(NAME_IsPrimaryKey);
        public static readonly XName XNAME_Property = XName.Get(NAME_Property);
        public static readonly XName XNAME_LeftProperty = XName.Get(NAME_LeftProperty);
        public static readonly XName XNAME_RightProperty = XName.Get(NAME_RightProperty);
        public static readonly XName XNAME_Operator = XName.Get(NAME_Operator);
        public static readonly XName XNAME_PrimaryKey = XName.Get(NAME_PrimaryKey);
        public static readonly XName XNAME_ForeignKey = XName.Get(NAME_ForeignKey);
        public static readonly XName XNAME_AmbientString = XName.Get(NAME_AmbientString);
        public static readonly XName XNAME_AmbientUInt = XName.Get(NAME_AmbientUInt);
        public static readonly XName XNAME_AmbientLong = XName.Get(NAME_AmbientLong);
        public static readonly XName XNAME_AmbientULong = XName.Get(NAME_AmbientULong);
        public static readonly XName XNAME_IsCaseSensitive = XName.Get(NAME_IsCaseSensitive);
        [Obsolete("Remove this")]
        public static readonly XName XNAME_ConstraintName = XName.Get(NAME_ConstraintName);
        public static readonly XName XNAME_DbRelationship = XName.Get(NAME_DbRelationship);
        public static readonly XName XNAME_FkPropertyName = XName.Get(NAME_FkPropertyName);
        public static readonly XName XNAME_Check = XName.Get(NAME_Check);
        public static readonly XName XNAME_And = XName.Get(NAME_And);
        public static readonly XName XNAME_Or = XName.Get(NAME_Or);
        public static readonly XName XNAME_IsNull = XName.Get(NAME_IsNull);
        public static readonly XName XNAME_NotNull = XName.Get(NAME_NotNull);
        public static readonly XName XNAME_LessThan = XName.Get(NAME_LessThan);
        public static readonly XName XNAME_NotGreaterThan = XName.Get(NAME_NotGreaterThan);
        public static readonly XName XNAME_Equals = XName.Get(NAME_Equals);
        public static readonly XName XNAME_NotEquals = XName.Get(NAME_NotEquals);
        public static readonly XName XNAME_NotLessThan = XName.Get(NAME_NotLessThan);
        public static readonly XName XNAME_GreaterThan = XName.Get(NAME_GreaterThan);
        public static readonly XName XNAME_OtherProperty = XName.Get(NAME_OtherProperty);
        public static readonly XName XNAME_True = XName.Get(NAME_True);
        public static readonly XName XNAME_False = XName.Get(NAME_False);
        public static readonly XName XNAME_Now = XName.Get(NAME_Now);
        public static readonly XName XNAME_Trimmed = XName.Get(NAME_Trimmed);
        public static readonly XName XNAME_Length = XName.Get(NAME_Length);
        public static readonly XName XNAME_Navigation = XName.Get(NAME_Navigation);
        public static readonly XName XNAME_IsOneToOne = XName.Get(NAME_IsOneToOne);

        #endregion

        #region Regular Expression Fields

        public static readonly Regex NewLineRegex = new(@"\r\n?|[\n\p{Zl}\p{Zp}]", RegexOptions.Compiled);
        public static readonly Regex NormalizeWsRegex = new(@" ((?![\r\n])\s)*|(?! )((?![\r\n])\s)+", RegexOptions.Compiled);
        public static readonly Regex NormalizeNewLineRegex = new(@"[\v\t\p{Zl}\p{Zp}]|\r(?!\n)", RegexOptions.Compiled);
        public static readonly Regex TrimOuterBlankLinesRegex = new(@"^(\s*(\r\n?|\n))+|((\r\n?|\n)\s*)+$", RegexOptions.Compiled);
        public static readonly Regex StripWsRegex = new(@"^ [ \t\u0085\p{Zs}]+(?=[\r\n\v\t\p{Zl}\p{Zp}])|(?<=[\r\n\v\t\p{Zl}\p{Zp}])[ \t\u0085\p{Zs}]+", RegexOptions.Compiled);
        public static readonly Regex LeadingWsRegex = new(@"^\s+", RegexOptions.Compiled);
        public static readonly Regex LeadingEmptyLine = new(@"^([^\r\n\S]+)?(\r\n?|\n)", RegexOptions.Compiled);
        public static readonly Regex TrailingEmptyLine = new(@"(\r\n?|\n)([^\r\n\S]+)?$", RegexOptions.Compiled);
        public static readonly Regex TrailingWsRegex = new(@"\s+$", RegexOptions.Compiled);

        #endregion
    }
}
